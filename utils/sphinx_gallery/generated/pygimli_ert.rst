
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "cofi-examples/utils/sphinx_gallery/generated/pygimli_ert.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_cofi-examples_utils/sphinx_gallery_generated_pygimli_ert.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_cofi-examples_utils/sphinx_gallery_generated_pygimli_ert.py:


PyGIMLi - Electrical Resistivity Tomography
===========================================

Using the ERT solver implemented provided by
`PyGIMLi <https://www.pygimli.org/>`__, we use different ``cofi``
solvers to solve the corresponding inverse problem.

.. GENERATED FROM PYTHON SOURCE LINES 13-16

.. raw:: html

	<badge><a href="https://colab.research.google.com/github/inlab-geo/cofi-examples/blob/main/notebooks/pygimli_ert/pygimli_ert.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></badge>

.. GENERATED FROM PYTHON SOURCE LINES 19-38

.. raw:: html

   <!-- Again, please don't touch the markdown cell above. We'll generate badge 
        automatically from the above cell. -->

.. raw:: html

   <!-- This cell describes things related to environment setup, so please add more text 
        if something special (not listed below) is needed to run this notebook -->

..

   If you are running this notebook locally, make sure you’ve followed
   `steps
   here <https://github.com/inlab-geo/cofi-examples#run-the-examples-with-cofi-locally>`__
   to set up the environment. (This
   `environment.yml <https://github.com/inlab-geo/cofi-examples/blob/main/environment.yml>`__
   file specifies a list of packages required to run the notebooks)


.. GENERATED FROM PYTHON SOURCE LINES 41-44

0. Import modules
-----------------


.. GENERATED FROM PYTHON SOURCE LINES 44-63

.. code-block:: default


    # -------------------------------------------------------- #
    #                                                          #
    #     Uncomment below to set up environment on "colab"     #
    #                                                          #
    # -------------------------------------------------------- #

    # !pip install -U cofi

    # !MINICONDA_INSTALLER_SCRIPT=Miniconda3-4.5.4-Linux-x86_64.sh
    # !MINICONDA_PREFIX=/usr/local
    # !wget https://repo.continuum.io/miniconda/$MINICONDA_INSTALLER_SCRIPT
    # !chmod +x $MINICONDA_INSTALLER_SCRIPT
    # !./$MINICONDA_INSTALLER_SCRIPT -b -f -p $MINICONDA_PREFIX
    # !conda install -c gimli pygimli -y

    # import sys
    # _ = (sys.path.append("/usr/local/lib/python3.7/site-packages"))








.. GENERATED FROM PYTHON SOURCE LINES 68-78

We will need the following packages:

-  ``numpy`` for matrices and matrix-related functions
-  ``matplotlib`` for plotting
-  ``pygimli`` for forward modelling of the problem
-  ``cofi`` for accessing different inference solvers

Additionally, we wrap some ``pygimli`` code in file
``pygimli_ert_lib.py`` and import it here for conciseness.


.. GENERATED FROM PYTHON SOURCE LINES 78-91

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    import pygimli as pg
    import pygimli.meshtools as mt
    from pygimli.physics import ert

    from cofi import BaseProblem, InversionOptions, Inversion

    from pygimli_ert_lib import *

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 96-99

1. Define the problem
---------------------


.. GENERATED FROM PYTHON SOURCE LINES 102-105

We first define the true model, the survey and map it on a computational
mesh designed for the survey and true anomaly.


.. GENERATED FROM PYTHON SOURCE LINES 105-119

.. code-block:: default


    # PyGIMLi - define measuring scheme, geometry, forward mesh and true model
    scheme = scheme_fwd()
    geometry = geometry_true()
    fmesh = mesh_fwd(scheme, geometry)
    rhomap = markers_to_resistivity()
    model_true = model_vec(rhomap, fmesh)

    # plot the compuational mesh and the true model
    ax=pg.show(fmesh)
    ax[0].set_title("Computational Mesh")
    ax=pg.show(fmesh,data=model_true,label=r"$\Omega m$")
    ax[0].set_title("Resitivity");




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_001.png
         :alt: Computational Mesh
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_002.png
         :alt: Resitivity
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Resitivity')



.. GENERATED FROM PYTHON SOURCE LINES 124-127

Generate the synthetic data as a container with all the necessary
information for plotting.


.. GENERATED FROM PYTHON SOURCE LINES 127-136

.. code-block:: default


    # PyGIMLi - generate data
    survey = ert.simulate(fmesh, res=rhomap, scheme=scheme)

    ax=ert.showERTData(survey,label=r"$\Omega$m")
    ax[0].set_title("Aparent Resitivity")

    y_obs = np.log(survey['rhoa'].array())




.. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_003.png
   :alt: Aparent Resitivity
   :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 141-167

The inversion can use a different mesh and the mesh to be used should
know nothing about the mesh that was designed based on the true model.
We wrap two kinds of mesh as examples in the library code
``pygimli_ert_lib.py``, namely triangular and rectangular mesh.

Use ``imesh_tri = mesh_inv_triangular(scheme)`` to initialise a
triangular mesh, with the following optional arguments and corresponding
default values:

-  ``start=[-15, 0]``
-  ``end=[65, -30]``

Use ``imesh_rect = mesh_inv_rectangular()`` to initislise a rectangular
mesh, with the following optional arguments and corresponding default
values:

-  ``x_start=-15``
-  ``x_stop=60``
-  ``x_num=11``
-  ``y_start=-30``
-  ``y_stop=0``
-  ``y_num=5``

Here we first demonstrate how to use a *triangular mesh*. Note that this
makes the inversion problem under-determined.


.. GENERATED FROM PYTHON SOURCE LINES 167-174

.. code-block:: default


    # PyGIMLi - quick demo of triangular mesh
    imesh_tri = mesh_inv_triangular(scheme)

    ax=pg.show(imesh_tri)
    ax[0].set_title("Inversion Mesh (triangular)");




.. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_004.png
   :alt: Inversion Mesh (triangular)
   :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inversion Mesh (triangular)')



.. GENERATED FROM PYTHON SOURCE LINES 179-186

Check
`here <https://github.com/inlab-geo/cofi-examples/tree/main/notebooks/pygimli_ert>`__
for inversion examples using triangular mesh.

For the purpose of this notebook, we use a *rectangular mesh* for a
simple demonstration.


.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default


    # PyGIMLi - create mesh for inversion
    imesh = mesh_inv_rectangular()
    ax = pygimli.show(imesh)
    ax[0].set_title("Inversion Mesh (rectangular)");




.. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_005.png
   :alt: Inversion Mesh (rectangular)
   :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inversion Mesh (rectangular)')



.. GENERATED FROM PYTHON SOURCE LINES 197-200

With the inversion mesh created, we now define a starting model, forward
operator and weighting matrix for regularisation using PyGIMLi.


.. GENERATED FROM PYTHON SOURCE LINES 200-210

.. code-block:: default


    # PyGIMLi - define the starting model on the inversion mesh
    model_0 = starting_model(imesh)

    # PyGIMLi - set up a forward operator with the inversion mesh
    forward_operator = forward_oprt(scheme, imesh)

    # PyGIMLi - extract the regularisation weighting matrix
    Wm = weighting_matrix(forward_operator, imesh)








.. GENERATED FROM PYTHON SOURCE LINES 215-229

CoFI and other inference packages require a set of functions that
provide the misfit, the jacobian the residual within the case of scipy
standardised interfaces. All these functions are defined in the library
file ``pygimli_ert_lib.py``, so open this file if you’d like to find out
the details. These functions are:

-  ``get_response``
-  ``get_jacobian``
-  ``get_residuals``
-  ``get_misfit``
-  ``get_regularisation``
-  ``get_gradient``
-  ``get_hessian``


.. GENERATED FROM PYTHON SOURCE LINES 232-236

With all the above forward operations set up with PyGIMLi, we now define
the problem in ``cofi`` by setting the problem information for a
``BaseProblem`` object.


.. GENERATED FROM PYTHON SOURCE LINES 236-252

.. code-block:: default


    # hyperparameters
    lamda = 1

    # cofi problem definition
    ert_problem = BaseProblem()
    ert_problem.name = "Electrical Resistivity Tomography defined through PyGIMLi"
    ert_problem.set_forward(get_response, args=[forward_operator])
    ert_problem.set_jacobian(get_jacobian, args=[forward_operator])
    ert_problem.set_residual(get_residuals, args=[y_obs, forward_operator])
    ert_problem.set_data_misfit(get_misfit, args=[y_obs, forward_operator, True])
    ert_problem.set_regularisation(get_regularisation, lamda=lamda, args=[Wm, True])
    ert_problem.set_gradient(get_gradient, args=[y_obs, forward_operator, lamda, Wm])
    ert_problem.set_hessian(get_hessian, args=[y_obs, forward_operator, lamda, Wm])
    ert_problem.set_initial_model(model_0)








.. GENERATED FROM PYTHON SOURCE LINES 257-259

Review what information is included in the ``BaseProblem`` object:


.. GENERATED FROM PYTHON SOURCE LINES 259-262

.. code-block:: default


    ert_problem.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ========================================================================================
    Summary for inversion problem: Electrical Resistivity Tomography defined through PyGIMLi
    ========================================================================================
    Model shape: (193,)
    ----------------------------------------------------------------------------------------
    List of functions/properties set by you:
    ['gradient', 'hessian', 'residual', 'jacobian', 'data_misfit', 'regularisation', 'forward', 'initial_model', 'model_shape']
    ----------------------------------------------------------------------------------------
    List of functions/properties created based on what you have provided:
    ['objective', 'hessian_times_vector', 'jacobian_times_vector']
    ----------------------------------------------------------------------------------------
    List of functions/properties not set by you:
    ['objective', 'log_posterior', 'log_posterior_with_blobs', 'log_likelihood', 'log_prior', 'hessian_times_vector', 'jacobian_times_vector', 'data', 'data_covariance', 'data_covariance_inv', 'walkers_starting_pos', 'blobs_dtype', 'bounds', 'constraints']




.. GENERATED FROM PYTHON SOURCE LINES 267-273

2. Define the inversion options and run
---------------------------------------

2.1 SciPy’s optimiser (`L-BFGS-B <https://docs.scipy.org/doc/scipy/reference/optimize.minimize-lbfgsb.html#optimize-minimize-lbfgsb>`__)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 273-276

.. code-block:: default


    ert_problem.suggest_solvers();





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Based on what you've provided so far, here are possible solvers:
    {
        "optimisation": [
            "scipy.optimize.minimize",
            "scipy.optimize.least_squares"
        ],
        "linear least square": [],
        "sampling": []
    }

    {'optimisation': ['scipy.optimize.minimize', 'scipy.optimize.least_squares'], 'linear least square': [], 'sampling': []}



.. GENERATED FROM PYTHON SOURCE LINES 278-283

.. code-block:: default


    inv_options = InversionOptions()
    inv_options.set_tool("scipy.optimize.minimize")
    inv_options.set_params(method="L-BFGS-B")








.. GENERATED FROM PYTHON SOURCE LINES 288-290

Review what’s been defined for the inversion we are about to run:


.. GENERATED FROM PYTHON SOURCE LINES 290-293

.. code-block:: default


    inv_options.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    =============================
    Summary for inversion options
    =============================
    Solving method: None set
    Use `suggest_solving_methods()` to check available solving methods.
    -----------------------------
    Backend tool: `scipy.optimize.minimize` - SciPy's optimisers that minimises a scalar function with respect to one or more variables, check SciPy's documentation page for a list of methods
    References: ['https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html']
    Use `suggest_tools()` to check available backend tools.
    -----------------------------
    Solver-specific parameters: 
    method = L-BFGS-B
    Use `suggest_solver_params()` to check required/optional solver-specific parameters.




.. GENERATED FROM PYTHON SOURCE LINES 295-300

.. code-block:: default


    inv = Inversion(ert_problem, inv_options)
    inv_result = inv.run()
    inv_result.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/jiawen/opt/mambaforge/envs/cofi_dev/lib/python3.10/site-packages/scipy/optimize/_minimize.py:548: RuntimeWarning: Method L-BFGS-B does not use Hessian information (hess).
      warn('Method %s does not use Hessian information (hess).' % method,
    /home/jiawen/opt/mambaforge/envs/cofi_dev/lib/python3.10/site-packages/scipy/optimize/_minimize.py:554: RuntimeWarning: Method L-BFGS-B does not use Hessian-vector product information (hessp).
      warn('Method %s does not use Hessian-vector product '
    data misfit: 1330.5823132055143
    raw regularisation: 0.0
    data misfit: 1325.9161253098425
    raw regularisation: 3.2377373769833095
    data misfit: 1310.1261871672973
    raw regularisation: 80.94343442458147
    data misfit: 1322.2597025362873
    raw regularisation: 10.893411237920638
    data misfit: 1325.135359647151
    raw regularisation: 4.464129155274968
    data misfit: 1325.7525438833811
    raw regularisation: 3.477259459784778
    data misfit: 1325.9161253098425
    raw regularisation: 3.2377373769833095
    data misfit: 1264.5224957842584
    raw regularisation: 1012.8227161445419
    data misfit: 1310.7004959099122
    raw regularisation: 54.45085548727792
    data misfit: 1322.561654493989
    raw regularisation: 8.579849219838769
    data misfit: 1325.2029179367073
    raw regularisation: 4.127365486399786
    data misfit: 1325.7658184451464
    raw regularisation: 3.4144837114354685
    data misfit: 1325.8845086408692
    raw regularisation: 3.27444109406676
    data misfit: 1325.9094702083783
    raw regularisation: 3.245433645438855
    data misfit: 1325.9147261583928
    raw regularisation: 3.2393545612555887
    data misfit: 1325.915830240955
    raw regularisation: 3.238077335808534
    data misfit: 1325.9160639187135
    raw regularisation: 3.2378088557243734
    data misfit: 1325.916113938105
    raw regularisation: 3.2377524009730303
    data misfit: 1325.916120497734
    raw regularisation: 3.2377405226584632
    data misfit: 1325.9161169013096
    raw regularisation: 3.2377483623432126
    data misfit: 1325.916117762816
    raw regularisation: 3.237742145793666
    data misfit: 1325.9161168403282
    raw regularisation: 3.237746248715588
    data misfit: 1325.9161186890526
    raw regularisation: 3.2377429879089594
    data misfit: 1325.9161177820065
    raw regularisation: 3.2377423105919054
    data misfit: 1325.916117762816
    raw regularisation: 3.237742145793666
    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    fun: 1329.1538599086095
    jac: [ 3.92351568e-02  3.62388505e-01  1.32583944e-01  3.30928213e-01
      3.97340148e-01  1.92100742e-01  6.77337016e-01  4.43997635e-01
      8.19917918e-02  4.11619499e-01  2.44658540e-01  1.19599336e-01
      1.74484752e-01 -1.28990866e-01  3.89933063e-01  4.58226528e-03
      3.65620805e-01 -7.39992360e-02  1.08456923e-01  1.05594715e+00
      1.14109340e-01  2.71480696e-01  2.78963365e-01  3.14252928e-01
      7.47290440e-02  3.29102231e-01  1.97835110e-01  2.21707693e-01
      2.97465337e-02  2.38245925e-01  9.22820262e-02  4.63133553e-01
      8.24896289e-01  8.04083126e-02  1.29879329e-01  8.04685201e-02
      4.93248853e-01  3.57741286e-01  2.80073156e-01  1.60919374e-01
      9.84182884e-02  2.71168216e-01  8.74677541e-02  7.12422793e-01
      1.86988200e-01  4.22983650e-02  3.98849379e-01  2.18123716e-02
      9.42282361e-01 -8.35227088e-02  5.79934498e-01  1.72209869e-01
     -8.96485535e-02  2.19287591e-01 -1.07436286e-02  9.82549964e-01
      9.58239015e-01  1.52158641e-02  8.36710131e-02  3.83902853e-01
      2.57084669e-01  6.82318157e-01  2.86973904e-02  3.31625824e-01
      7.72620515e-02  9.77413722e-02  5.62506745e-01  3.44636374e-01
      1.09217725e-01  9.05857290e-02  1.45012116e-01  7.15466752e-01
      1.26200740e-01  3.03179638e-01  2.27104636e-01  5.90428242e-01
      3.24249638e-01  8.48605176e-01  1.61137664e+00  2.10324708e+00
      7.11315455e-01  3.74521641e-01  2.15206911e-02  3.78276930e-01
      1.25067377e+00  1.08548369e-02  4.22733479e-01  3.75235376e-01
      1.80051270e-01  2.10327645e+00  4.28376053e-01  2.28656686e-01
      5.42081197e-01  8.35450117e-01  5.58655901e-02  4.71954825e-01
      7.54514194e-01  1.40324178e-01  1.15598955e+00  3.06897736e-01
      1.59170651e-01  9.41471789e-02  1.71919644e-01 -8.67187961e-02
      4.94027303e-01  1.07462881e-01  2.84755229e-01  4.88834788e-01
      2.13315861e-01  1.90272733e-01  1.59639769e-01  9.36167289e-02
      7.07863135e-02  1.51042500e-01  5.99603518e-02  8.30540811e-02
      1.47584812e-01  6.15723037e-02  6.89660825e-02  1.67737327e-01
      1.57804307e-01  7.96142632e-02  1.04373850e-01  1.96068287e-01
      6.78754851e-02  1.06074441e-01  6.29149778e-02  1.94640079e-01
      2.17064612e-01  1.07821304e-01  1.29347134e-01  1.38623419e-01
      1.17137816e-01  6.16863113e-02  1.91775229e-01  4.95403314e-02
      2.79664894e-02  7.62283165e-02  6.11970083e-02  1.02728438e-01
      1.10363422e-01  2.27824973e-01  9.04379928e-02  8.87483237e-02
      7.88690408e-02  3.07730445e-02  9.23813849e-02  1.23285181e-01
      5.23061901e-02  3.25339014e-02  7.51294860e-02  2.54329118e-01
      1.13188381e-01  6.97493222e-01  7.08745409e-01  3.16719157e-01
     -3.97754991e-01 -1.12395642e+00 -1.45609689e+00 -1.17269298e+00
     -3.74229896e-01  4.04139234e-01  7.57276584e-01  1.70089847e+00
      1.76487738e+00 -4.17015521e-02 -3.09836966e+00 -6.03462726e+00
     -7.65652181e+00 -6.82705222e+00 -3.41920941e+00  4.31793996e-01
      1.93378916e+00  4.92713295e+00  6.21985676e+00 -9.41743453e+00
     -2.39968643e+01 -3.78363279e+01 -4.68603855e+01 -4.55822552e+01
     -3.03768009e+01 -1.93291967e+00  6.60189577e+00  1.11733850e+01
      8.24522808e+01 -1.02338204e+02  1.66985961e+01 -2.76560200e+01
      7.16665780e+00 -3.47087307e-01 -9.67104926e+01  2.44342345e+01
      3.57606473e+01]
    nfev: 25
    njev: 25
    nit: 2
    status: 0
    message: CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH
    hess_inv: <193x193 LbfgsInvHessProduct with dtype=float64>
    model: [79.99980835 79.99823626 79.99935212 79.99839858 79.99806961 79.9990644
     79.99668925 79.99782263 79.99960053 79.99800633 79.99881699 79.99941897
     79.99914864 80.00059981 79.99809254 79.9999789  79.9982188  80.00036053
     79.99947942 79.99486695 79.99944329 79.99867589 79.99864677 79.99846803
     79.99963586 79.99839297 79.99903489 79.99891866 79.99984889 79.9988416
     79.99955095 79.99772371 79.99618301 79.99961111 79.9993659  79.99960826
     79.99758297 79.99825859 79.9986329  79.99923394 79.999521   79.99867842
     79.99957144 79.99653902 79.99910191 79.99979501 79.99805326 79.99989145
     79.99547144 80.0003859  79.99716203 79.9991583  80.0004125  79.99892832
     80.0000525  79.9952128  79.99534708 79.99991625 79.99959056 79.9981229
     79.99875961 79.99668331 79.99986204 79.99839434 79.99962697 79.99952368
     79.9972548  79.99832313 79.9994702  79.99956054 79.99929365 79.99651322
     79.99938589 79.99853098 79.99889681 79.9971208  79.99841751 79.99588466
     79.99217012 79.98983094 79.99653428 79.99816622 79.9998969  79.99814895
     79.99390983 79.99994774 79.99793319 79.99816349 79.99912074 79.99053395
     79.99797038 79.99888874 79.99735318 79.99593618 79.9997298  79.99770155
     79.99633489 79.99931969 79.99435482 79.99850015 79.99922475 79.99954117
     79.99916028 80.00042513 79.99759746 79.9994836  79.99861562 79.99761112
     79.99896195 79.99907492 79.99922218 79.99954454 79.99965433 79.99926469
     79.99970893 79.99959566 79.99927966 79.99969957 79.99966399 79.99918292
     79.99923016 79.99961359 79.99949141 79.99904405 79.99967025 79.99948209
     79.9996949  79.99905632 79.99894113 79.99947734 79.99937371 79.99932009
     79.99943135 79.99969945 79.999066   79.99975951 79.99986485 79.99962937
     79.99970166 79.99949728 79.99946495 79.99889448 79.99955821 79.99956523
     79.99961703 79.99985209 79.99954952 79.99939785 79.99974813 79.99984263
     79.99963208 79.99875655 79.99945255 79.99660262 79.99655228 79.99844538
     80.00189735 80.00540191 80.00699155 80.00560762 80.00174775 79.99800411
     79.99630285 79.99172369 79.9914224  79.99998678 80.01467843 80.02876077
     80.03648413 80.03242495 80.01600853 79.9977207  79.99057473 79.97586518
     79.97101157 80.0437395  80.11835614 80.18457151 80.22966454 80.22364384
     80.146637   80.00928874 79.96798339 79.94656219 79.56607157 80.53740001
     79.89002785 80.16064329 79.96435442 79.9983894  80.49881032 79.85987201
     79.82434259]




.. GENERATED FROM PYTHON SOURCE LINES 302-305

.. code-block:: default


    inv_result.success





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 310-312

Plot the results:


.. GENERATED FROM PYTHON SOURCE LINES 312-335

.. code-block:: default


    ax=pg.show(
        fmesh,
        data=(model_true),
        label=r"$\Omega m$"
    )
    ax[0].set_title("True model")

    ax=pg.show(
        imesh,
        data=(model_0),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Starting model")


    ax=pg.show(
        imesh,
        data=(inv_result.model),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Inferred model");




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_006.png
         :alt: True model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_007.png
         :alt: Starting model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_008.png
         :alt: Inferred model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inferred model')



.. GENERATED FROM PYTHON SOURCE LINES 340-348

2.2 A custom `Newton’s optimisation <https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization>`__ approach
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we switch to a Newton’s iterative approach written by ourselves, so
you’ll have a closer look at what’s happening in the loop.

First of all, define our own solver.


.. GENERATED FROM PYTHON SOURCE LINES 348-379

.. code-block:: default


    from cofi.solvers import BaseSolver

    class MyNewtonSolver(BaseSolver):
        def __init__(self, inv_problem, inv_options):
            __params = inv_options.get_params()
            self._niter = __params["niter"]
            self._step = __params["step"]
            self._verbose = __params["verbose"]
            self._model_0 = inv_problem.initial_model
            self._gradient = inv_problem.gradient
            self._hessian = inv_problem.hessian
            self._misfit = inv_problem.data_misfit if inv_problem.data_misfit_defined else None
            self._reg = inv_problem.regularisation if inv_problem.regularisation_defined else None
            self._obj = inv_problem.objective if inv_problem.objective_defined else None
        
        def __call__(self):
            current_model = np.array(self._model_0)
            for i in range(self._niter):
                term1 = self._hessian(current_model)
                term2 = - self._gradient(current_model)
                model_update = np.linalg.solve(term1, term2)
                current_model = np.array(current_model + self._step * model_update)
                if self._verbose:
                    print("-" * 80)
                    print(f"Iteration {i+1}")
                    if self._misfit: self._misfit(current_model)
                    if self._reg: self._reg(current_model)
                    # if self._obj: print("objective func:", self._obj(current_model))
            return {"model": current_model, "success": True}








.. GENERATED FROM PYTHON SOURCE LINES 384-386

Now, make use of this custom solver and run inversion again:


.. GENERATED FROM PYTHON SOURCE LINES 386-395

.. code-block:: default


    inv_options_own_solver = InversionOptions()
    inv_options_own_solver.set_tool(MyNewtonSolver)
    inv_options_own_solver.set_params(niter=100, step=1, verbose=True)

    inv_own_solver = Inversion(ert_problem, inv_options_own_solver)
    inv_own_solver_res = inv_own_solver.run()
    inv_own_solver_res.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    --------------------------------------------------------------------------------
    Iteration 1
    data misfit: 1323.2573456559178
    raw regularisation: 94.16649894082346
    --------------------------------------------------------------------------------
    Iteration 2
    data misfit: 1317.4272078955055
    raw regularisation: 229.48689013717404
    --------------------------------------------------------------------------------
    Iteration 3
    data misfit: 1312.3875589366344
    raw regularisation: 369.5349248914488
    --------------------------------------------------------------------------------
    Iteration 4
    data misfit: 1307.8671166847114
    raw regularisation: 516.2007891101762
    --------------------------------------------------------------------------------
    Iteration 5
    data misfit: 1303.743319848044
    raw regularisation: 670.4903777355049
    --------------------------------------------------------------------------------
    Iteration 6
    data misfit: 1299.9466685775733
    raw regularisation: 831.5091039759487
    --------------------------------------------------------------------------------
    Iteration 7
    data misfit: 1296.4309015757412
    raw regularisation: 997.508302457018
    --------------------------------------------------------------------------------
    Iteration 8
    data misfit: 1293.161980134579
    raw regularisation: 1166.5649527426997
    --------------------------------------------------------------------------------
    Iteration 9
    data misfit: 1290.1131651172348
    raw regularisation: 1336.9012584357135
    --------------------------------------------------------------------------------
    Iteration 10
    data misfit: 1287.2625564537655
    raw regularisation: 1507.000715073794
    --------------------------------------------------------------------------------
    Iteration 11
    data misfit: 1284.5916938097942
    raw regularisation: 1675.627371810932
    --------------------------------------------------------------------------------
    Iteration 12
    data misfit: 1282.0846663977163
    raw regularisation: 1841.8043251139234
    --------------------------------------------------------------------------------
    Iteration 13
    data misfit: 1279.727612012332
    raw regularisation: 2004.7786574777874
    --------------------------------------------------------------------------------
    Iteration 14
    data misfit: 1277.5082531061246
    raw regularisation: 2163.984775097861
    --------------------------------------------------------------------------------
    Iteration 15
    data misfit: 1275.4156326481932
    raw regularisation: 2319.0109188523365
    --------------------------------------------------------------------------------
    Iteration 16
    data misfit: 1273.4399159109776
    raw regularisation: 2469.5703710213893
    --------------------------------------------------------------------------------
    Iteration 17
    data misfit: 1271.5721923220924
    raw regularisation: 2615.4773160624914
    --------------------------------------------------------------------------------
    Iteration 18
    data misfit: 1269.804333270248
    raw regularisation: 2756.6270448385653
    --------------------------------------------------------------------------------
    Iteration 19
    data misfit: 1268.128943639689
    raw regularisation: 2892.979242609924
    --------------------------------------------------------------------------------
    Iteration 20
    data misfit: 1266.5392247389138
    raw regularisation: 3024.545442688773
    --------------------------------------------------------------------------------
    Iteration 21
    data misfit: 1265.0289376363205
    raw regularisation: 3151.377548959335
    --------------------------------------------------------------------------------
    Iteration 22
    data misfit: 1263.5923687423303
    raw regularisation: 3273.55924042317
    --------------------------------------------------------------------------------
    Iteration 23
    data misfit: 1262.224268935002
    raw regularisation: 3391.1986997951694
    --------------------------------------------------------------------------------
    Iteration 24
    data misfit: 1260.919819065715
    raw regularisation: 3504.4227357710633
    --------------------------------------------------------------------------------
    Iteration 25
    data misfit: 1259.674625745899
    raw regularisation: 3613.371917720042
    --------------------------------------------------------------------------------
    Iteration 26
    data misfit: 1258.4846475624165
    raw regularisation: 3718.196675152047
    --------------------------------------------------------------------------------
    Iteration 27
    data misfit: 1257.346207211868
    raw regularisation: 3819.054038496253
    --------------------------------------------------------------------------------
    Iteration 28
    data misfit: 1256.255960015029
    raw regularisation: 3916.105037509905
    --------------------------------------------------------------------------------
    Iteration 29
    data misfit: 1255.2108686130066
    raw regularisation: 4009.5125849862247
    --------------------------------------------------------------------------------
    Iteration 30
    data misfit: 1254.2081587680152
    raw regularisation: 4099.439777255809
    --------------------------------------------------------------------------------
    Iteration 31
    data misfit: 1253.2453451525823
    raw regularisation: 4186.048482190107
    --------------------------------------------------------------------------------
    Iteration 32
    data misfit: 1252.3201499017812
    raw regularisation: 4269.498316247878
    --------------------------------------------------------------------------------
    Iteration 33
    data misfit: 1251.4305418432896
    raw regularisation: 4349.945720518786
    --------------------------------------------------------------------------------
    Iteration 34
    data misfit: 1250.5746863286845
    raw regularisation: 4427.543353837452
    --------------------------------------------------------------------------------
    Iteration 35
    data misfit: 1249.7509301066332
    raw regularisation: 4502.439584505755
    --------------------------------------------------------------------------------
    Iteration 36
    data misfit: 1248.957806560379
    raw regularisation: 4574.778123205424
    --------------------------------------------------------------------------------
    Iteration 37
    data misfit: 1248.1939897219972
    raw regularisation: 4644.697771570813
    --------------------------------------------------------------------------------
    Iteration 38
    data misfit: 1247.4583033880242
    raw regularisation: 4712.33231653016
    --------------------------------------------------------------------------------
    Iteration 39
    data misfit: 1246.749700596177
    raw regularisation: 4777.810316161193
    --------------------------------------------------------------------------------
    Iteration 40
    data misfit: 1246.067272623189
    raw regularisation: 4841.255180664707
    --------------------------------------------------------------------------------
    Iteration 41
    data misfit: 1245.410207923158
    raw regularisation: 4902.78516874814
    --------------------------------------------------------------------------------
    Iteration 42
    data misfit: 1244.7778085692735
    raw regularisation: 4962.513437806288
    --------------------------------------------------------------------------------
    Iteration 43
    data misfit: 1244.1694694457804
    raw regularisation: 5020.548137329068
    --------------------------------------------------------------------------------
    Iteration 44
    data misfit: 1243.5846703523666
    raw regularisation: 5076.992509148559
    --------------------------------------------------------------------------------
    Iteration 45
    data misfit: 1243.0229840034108
    raw regularisation: 5131.9450322873445
    --------------------------------------------------------------------------------
    Iteration 46
    data misfit: 1242.4840673627023
    raw regularisation: 5185.499564916901
    --------------------------------------------------------------------------------
    Iteration 47
    data misfit: 1241.9676511708985
    raw regularisation: 5237.745477832906
    --------------------------------------------------------------------------------
    Iteration 48
    data misfit: 1241.4735287048404
    raw regularisation: 5288.767842047467
    --------------------------------------------------------------------------------
    Iteration 49
    data misfit: 1241.0015738980296
    raw regularisation: 5338.647527270232
    --------------------------------------------------------------------------------
    Iteration 50
    data misfit: 1240.5517203560723
    raw regularisation: 5387.461403966935
    --------------------------------------------------------------------------------
    Iteration 51
    data misfit: 1240.123974792514
    raw regularisation: 5435.282458519151
    --------------------------------------------------------------------------------
    Iteration 52
    data misfit: 1239.7184005478016
    raw regularisation: 5482.1799626640895
    --------------------------------------------------------------------------------
    Iteration 53
    data misfit: 1239.3351133802264
    raw regularisation: 5528.219575694087
    --------------------------------------------------------------------------------
    Iteration 54
    data misfit: 1238.9743044095487
    raw regularisation: 5573.463466128779
    --------------------------------------------------------------------------------
    Iteration 55
    data misfit: 1238.6362282190212
    raw regularisation: 5617.970447671425
    --------------------------------------------------------------------------------
    Iteration 56
    data misfit: 1238.3211853780388
    raw regularisation: 5661.796065475353
    --------------------------------------------------------------------------------
    Iteration 57
    data misfit: 1238.0295392509101
    raw regularisation: 5704.992674468524
    --------------------------------------------------------------------------------
    Iteration 58
    data misfit: 1237.7617246225366
    raw regularisation: 5747.609508687742
    --------------------------------------------------------------------------------
    Iteration 59
    data misfit: 1237.518226848122
    raw regularisation: 5789.692744069061
    --------------------------------------------------------------------------------
    Iteration 60
    data misfit: 1237.2995837541516
    raw regularisation: 5831.285532219342
    --------------------------------------------------------------------------------
    Iteration 61
    data misfit: 1237.1064169387332
    raw regularisation: 5872.428017698618
    --------------------------------------------------------------------------------
    Iteration 62
    data misfit: 1236.93938519606
    raw regularisation: 5913.157363721364
    --------------------------------------------------------------------------------
    Iteration 63
    data misfit: 1236.799228145695
    raw regularisation: 5953.507708867347
    --------------------------------------------------------------------------------
    Iteration 64
    data misfit: 1236.6867365531982
    raw regularisation: 5993.510166304572
    --------------------------------------------------------------------------------
    Iteration 65
    data misfit: 1236.6027528969669
    raw regularisation: 6033.192791360493
    --------------------------------------------------------------------------------
    Iteration 66
    data misfit: 1236.5481995442274
    raw regularisation: 6072.580484214514
    --------------------------------------------------------------------------------
    Iteration 67
    data misfit: 1236.5240500961713
    raw regularisation: 6111.694968777014
    --------------------------------------------------------------------------------
    Iteration 68
    data misfit: 1236.5313320903135
    raw regularisation: 6150.554681058004
    --------------------------------------------------------------------------------
    Iteration 69
    data misfit: 1236.571145083125
    raw regularisation: 6189.174707228246
    --------------------------------------------------------------------------------
    Iteration 70
    data misfit: 1236.6446128339728
    raw regularisation: 6227.5666971444425
    --------------------------------------------------------------------------------
    Iteration 71
    data misfit: 1236.7529300527183
    raw regularisation: 6265.738764617812
    --------------------------------------------------------------------------------
    Iteration 72
    data misfit: 1236.8973398797414
    raw regularisation: 6303.695430719423
    --------------------------------------------------------------------------------
    Iteration 73
    data misfit: 1237.0791131542182
    raw regularisation: 6341.437535915692
    --------------------------------------------------------------------------------
    Iteration 74
    data misfit: 1237.2995548955098
    raw regularisation: 6378.962197938447
    --------------------------------------------------------------------------------
    Iteration 75
    data misfit: 1237.5599806005969
    raw regularisation: 6416.262820251721
    --------------------------------------------------------------------------------
    Iteration 76
    data misfit: 1237.8617460397693
    raw regularisation: 6453.329055136683
    --------------------------------------------------------------------------------
    Iteration 77
    data misfit: 1238.2061873567297
    raw regularisation: 6490.1469247403575
    --------------------------------------------------------------------------------
    Iteration 78
    data misfit: 1238.5946273945128
    raw regularisation: 6526.698865528821
    --------------------------------------------------------------------------------
    Iteration 79
    data misfit: 1239.0283873735564
    raw regularisation: 6562.963938778132
    --------------------------------------------------------------------------------
    Iteration 80
    data misfit: 1239.508712834326
    raw regularisation: 6598.918010271125
    --------------------------------------------------------------------------------
    Iteration 81
    data misfit: 1240.0367962810096
    raw regularisation: 6634.534046932426
    --------------------------------------------------------------------------------
    Iteration 82
    data misfit: 1240.6137837925637
    raw regularisation: 6669.78249502448
    --------------------------------------------------------------------------------
    Iteration 83
    data misfit: 1241.2406764672007
    raw regularisation: 6704.631649575036
    --------------------------------------------------------------------------------
    Iteration 84
    data misfit: 1241.9183491388571
    raw regularisation: 6739.048147289855
    --------------------------------------------------------------------------------
    Iteration 85
    data misfit: 1242.647587353606
    raw regularisation: 6772.997488516372
    --------------------------------------------------------------------------------
    Iteration 86
    data misfit: 1243.428939844389
    raw regularisation: 6806.444581290063
    --------------------------------------------------------------------------------
    Iteration 87
    data misfit: 1244.2627990238336
    raw regularisation: 6839.354372538914
    --------------------------------------------------------------------------------
    Iteration 88
    data misfit: 1245.1493336104863
    raw regularisation: 6871.692428238515
    --------------------------------------------------------------------------------
    Iteration 89
    data misfit: 1246.0884686935099
    raw regularisation: 6903.425544017574
    --------------------------------------------------------------------------------
    Iteration 90
    data misfit: 1247.0798523804656
    raw regularisation: 6934.522356263214
    --------------------------------------------------------------------------------
    Iteration 91
    data misfit: 1248.1228675359966
    raw regularisation: 6964.9538126174575
    --------------------------------------------------------------------------------
    Iteration 92
    data misfit: 1249.216590191562
    raw regularisation: 6994.693747562731
    --------------------------------------------------------------------------------
    Iteration 93
    data misfit: 1250.359748264118
    raw regularisation: 7023.719269238967
    --------------------------------------------------------------------------------
    Iteration 94
    data misfit: 1251.5507447678415
    raw regularisation: 7052.011072902592
    --------------------------------------------------------------------------------
    Iteration 95
    data misfit: 1252.7876422425343
    raw regularisation: 7079.55377821708
    --------------------------------------------------------------------------------
    Iteration 96
    data misfit: 1254.0681477788892
    raw regularisation: 7106.336005585524
    --------------------------------------------------------------------------------
    Iteration 97
    data misfit: 1255.3895901707588
    raw regularisation: 7132.350490037167
    --------------------------------------------------------------------------------
    Iteration 98
    data misfit: 1256.7489189331964
    raw regularisation: 7157.594088498758
    --------------------------------------------------------------------------------
    Iteration 99
    data misfit: 1258.142778597627
    raw regularisation: 7182.067667559624
    --------------------------------------------------------------------------------
    Iteration 100
    data misfit: 1259.5674643511923
    raw regularisation: 7205.7758946924105
    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    model: [ 63.61648233  60.29172357  61.12599046  69.34739212  60.67674119
      66.36502558  54.01871054  55.35067311  72.09483487  66.68772497
      68.7218397   75.78734095  71.74180565  85.96122999  56.70105899
      81.09080505  57.58088032  84.0643723   74.41950584  62.18759349
      75.27192991  61.46587483  58.31097428  51.91240018  55.15048249
      53.9185414   64.2973657   63.26476921  79.83370162  52.23183873
      76.08011632  48.93715029  47.92932843  72.22032661  55.27158149
      74.09388114  50.49803038  56.12815861  53.36644345  48.36818178
      67.47743614  53.29463711  79.10502764  56.97570067  64.18722178
      65.84217696  53.26148028  81.46539162  52.35213434  84.14532695
      57.78295387  63.44455254  85.17296619  53.87867335  82.17943198
      55.57136531  53.44174388  82.30587071  79.42800386  50.59230548
      73.05894893  60.49200809  66.35071712  58.81866136  56.84008106
      65.3652476   64.64444424  62.58048     59.15944583  77.14189309
      71.010698    55.63594026  54.63442765  68.65656741  59.28281774
      50.09556286  54.16791331  66.3592119   55.76134291  60.48688485
      58.10996267  51.60676638  79.52114682  52.29967773  54.59154421
      81.13984771  49.89211537  70.86931468  75.56378618  53.50765321
      52.94911226  71.15360663  65.96476024  53.78222679  74.05175714
      57.04978525  54.79499215  59.68787446  52.72806265  62.3709058
      58.71813311  78.07962563  73.01616079  83.84822674  61.68663621
      77.97557566  60.64603782  64.98232564  60.94636766  58.91698553
      66.32292605  68.42231697  76.0210826   61.70435006  68.12089609
      70.89138633  72.48649399  66.25246918  69.73214407  73.80996276
      74.61460523  74.56065847  72.46887338  60.64917042  59.69169236
      54.85105937  55.50806227  58.40419772  59.06798456  66.50721341
      63.81921384  58.6555572   59.53793373  56.15038007  55.77221696
      60.77794701  64.51414013  62.22996745  63.71788166  77.79724816
      73.5623136   66.75779193  66.88026169  67.94023843  64.45287075
      66.22808603  71.40739228  71.5266928   69.71961774  62.74684507
      61.90022417  68.94836143  69.11726299  63.0659933   68.24993177
      75.55498982  82.41175528  87.49236465  90.00376416  89.33916388
      85.37150704  79.02139308  72.92502579  59.66150609  66.20052346
      77.52945161  86.92107702  93.30637891  96.91399247  96.47744536
      90.7495386   80.11674879  70.79235089  53.68198501  60.70360919
      81.67715848  93.61024242 100.0017907  104.84698613 105.53585394
      98.90023962  80.03956794  65.06335605  45.98283962  45.63258025
      80.7762631   83.87145524  82.18862028  84.04599463  85.92973658
      91.96719614  72.16714168  53.38523845]




.. GENERATED FROM PYTHON SOURCE LINES 400-402

Plot the results:


.. GENERATED FROM PYTHON SOURCE LINES 402-425

.. code-block:: default


    ax=pg.show(
        fmesh,
        data=(model_true),
        label=r"$\Omega m$"
    )
    ax[0].set_title("True model")

    ax=pg.show(
        imesh,
        data=(model_0),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Starting model")


    ax=pg.show(
        imesh,
        data=(inv_own_solver_res.model),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Inferred model");




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_009.png
         :alt: True model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_010.png
         :alt: Starting model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_011.png
         :alt: Inferred model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_011.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inferred model')



.. GENERATED FROM PYTHON SOURCE LINES 430-441

2.3 Bayesian sampling with emcee (exploration)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

CoFI needs more assumptions about the problem for a sampler to work -
these are the log of posterior distribution density and walkers’
starting positions.

For the log posterior, we define here by specifying ``log_prior`` and
``log_likelihood``. And CoFI will combine them to get the
``log_posterior``.


.. GENERATED FROM PYTHON SOURCE LINES 441-469

.. code-block:: default


    # hyperparameters
    nwalkers = 32
    nsteps = 10

    # define log_likelihood
    sigma = 1.0                                     # common noise standard deviation
    Cdinv = np.eye(len(y_obs))/(sigma**2)           # inverse data covariance matrix
    def log_likelihood(model):
        residual = ert_problem.residual(model)
        return -0.5 * residual @ (Cdinv @ residual).T

    # define log_prior
    m_lower_bound = np.zeros(model_0.shape)         # lower bound for uniform prior
    m_upper_bound = np.ones(model_0.shape) * 250    # upper bound for uniform prior
    def log_prior(model):                           # uniform distribution
        for i in range(len(m_lower_bound)):
            if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
        return 0.0 # model lies within bounds -> return log(1)

    # define walkers' starting positions
    walkers_start = model_0 + 1e-6 * np.random.randn(nwalkers, model_0.shape[0])

    # define them into cofi's BaseProblem object
    ert_problem.set_log_likelihood(log_likelihood)
    ert_problem.set_log_prior(log_prior)
    ert_problem.set_walkers_starting_pos(walkers_start)








.. GENERATED FROM PYTHON SOURCE LINES 474-476

As usual, specify how you’d like to run the inversion and run it.


.. GENERATED FROM PYTHON SOURCE LINES 476-489

.. code-block:: default


    # define inversion options
    inv_options_emcee = InversionOptions()
    inv_options_emcee.set_tool("emcee")
    inv_options_emcee.set_params(nwalkers=nwalkers, nsteps=nsteps, progress=True)

    from emcee.moves import GaussianMove
    inv_options_emcee.set_params(moves=GaussianMove(1))

    # run the inversion
    inv_rect_emcee = Inversion(ert_problem, inv_options_emcee)
    inv_rect_emcee_res = inv_rect_emcee.run()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


      0%|          | 0/10 [00:00<?, ?it/s]
     10%|#         | 1/10 [00:10<01:36, 10.69s/it]
     20%|##        | 2/10 [00:20<01:20, 10.05s/it]
     30%|###       | 3/10 [00:32<01:16, 10.86s/it]
     40%|####      | 4/10 [00:42<01:04, 10.73s/it]
     50%|#####     | 5/10 [00:51<00:50, 10.11s/it]
     60%|######    | 6/10 [01:01<00:40, 10.11s/it]
     70%|#######   | 7/10 [01:10<00:28,  9.57s/it]
     80%|########  | 8/10 [01:19<00:18,  9.40s/it]
     90%|######### | 9/10 [01:28<00:09,  9.50s/it]
    100%|##########| 10/10 [01:42<00:00, 10.69s/it]
    100%|##########| 10/10 [01:42<00:00, 10.23s/it]




.. GENERATED FROM PYTHON SOURCE LINES 494-500

Let’s sub-sample 10 models from the posterior ensemble and plot them
out.

You’ll see that the results are not as good. That’s because we’ve used
only 32 walkers and 10 sampling steps.


.. GENERATED FROM PYTHON SOURCE LINES 500-503

.. code-block:: default


    sampler = inv_rect_emcee_res.sampler








.. GENERATED FROM PYTHON SOURCE LINES 505-516

.. code-block:: default


    flat_samples = sampler.get_chain(discard=5, flat=True)
    indices = np.random.randint(len(flat_samples), size=10) # get a random selection from posterior ensemble
    for idx in indices:
        ax=pg.show(
            imesh,
            data=(flat_samples[idx]),
            label=r"$\Omega m$"utils/sphinx_gallery
        )
        ax[0].set_title(f"Inferreutils/sphinx_gallerye {idx}");




.. rst-class:: sphx-glr-horizontalutils/sphinx_gallery

utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_012.png
         :alt: Inferred model - sample 0
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_012.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_013.png
         :alt: Inferred model - sample 130
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_013.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_014.png
         :alt: Inferred model - sample 85
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_014.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_015.png
         :alt: Inferred model - sample 61
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_015.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_016.png
         :alt: Inferred model - sample 63
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_016.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_017.png
         :alt: Inferred model - sample 144
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_017.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_018.png
         :alt: Inferred model - sample 125
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_018.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_019.png
         :alt: Inferred model - sample 104
         :srcset: /cofi-examples/_sutils/sphinx_galleryenerated/images/sphx_glr_pygimli_ert_019.png
         :class: sphx-glr-multi-img
utils/sphinx_gallery
    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_020.png
         :alt: Inferred model - sample 61
         :srcset: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_020.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_021.png
         :alt: Inferred model - sample 34
         :srcset: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_pygimli_ert_021.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 521-524

Not satisfied with the results? Go back to the code cell under 2.3 and
try with bigger numbers of walkers and steps 😉


.. GENERATED FROM PYTHON SOURCE LINES 527-532

--------------

Watermark
---------


.. GENERATED FROM PYTHON SOURCE LINES 532-538

.. code-block:: default


    watermark_list = ["cofi", "numpy", "scipy", "pygimli", "matplotlib", "emcee", "arviz"]
    for pkg in watermark_list:
        pkg_var = __import__(pkg)
        print(pkg, getattr(pkg_var, "__version__"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    cofi 0.1.2.dev6
    numpy 1.21.6
    scipy 1.8.1
    pygimli 1.2.6
    matplotlib 3.5.2
    emcee 3.1.2utils/sphinx_gallery
    arviz 0.12.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  12.062 seconds)


.. _sphx_glr_download_cofi-examples__sphinx_gallery_generated_pygimli_ert.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: pygimli_ert.py <pygimli_ert.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: pygimli_ert.ipynb <pygimli_ert.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
