
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "cofi-examples/utils/sphinx_gallery/generated/pygimli_ert.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_cofi-examples_utils_sphinx_gallery_generated_pygimli_ert.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_cofi-examples_utils_sphinx_gallery_generated_pygimli_ert.py:


PyGIMLi - Electrical Resistivity Tomography
===========================================

.. GENERATED FROM PYTHON SOURCE LINES 9-13

Using the ERT solver implemented provided by
`PyGIMLi <https://www.pygimli.org/>`__, we use different ``cofi``
solvers to solve the corresponding inverse problem.


.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. raw:: html

	<badge><a href="https://colab.research.google.com/github/inlab-geo/cofi-examples/blob/main/notebooks/pygimli_ert/pygimli_ert.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></badge>

.. GENERATED FROM PYTHON SOURCE LINES 22-41

.. raw:: html

   <!-- Again, please don't touch the markdown cell above. We'll generate badge 
        automatically from the above cell. -->

.. raw:: html

   <!-- This cell describes things related to environment setup, so please add more text 
        if something special (not listed below) is needed to run this notebook -->

..

   If you are running this notebook locally, make sure you’ve followed
   `steps
   here <https://github.com/inlab-geo/cofi-examples#run-the-examples-with-cofi-locally>`__
   to set up the environment. (This
   `environment.yml <https://github.com/inlab-geo/cofi-examples/blob/main/environment.yml>`__
   file specifies a list of packages required to run the notebooks)


.. GENERATED FROM PYTHON SOURCE LINES 44-47

0. Import modules
-----------------


.. GENERATED FROM PYTHON SOURCE LINES 47-66

.. code-block:: default


    # -------------------------------------------------------- #
    #                                                          #
    #     Uncomment below to set up environment on "colab"     #
    #                                                          #
    # -------------------------------------------------------- #

    # !pip install -U cofi

    # !MINICONDA_INSTALLER_SCRIPT=Miniconda3-4.5.4-Linux-x86_64.sh
    # !MINICONDA_PREFIX=/usr/local
    # !wget https://repo.continuum.io/miniconda/$MINICONDA_INSTALLER_SCRIPT
    # !chmod +x $MINICONDA_INSTALLER_SCRIPT
    # !./$MINICONDA_INSTALLER_SCRIPT -b -f -p $MINICONDA_PREFIX
    # !conda install -c gimli pygimli -y

    # import sys
    # _ = (sys.path.append("/usr/local/lib/python3.7/site-packages"))








.. GENERATED FROM PYTHON SOURCE LINES 71-81

We will need the following packages:

-  ``numpy`` for matrices and matrix-related functions
-  ``matplotlib`` for plotting
-  ``pygimli`` for forward modelling of the problem
-  ``cofi`` for accessing different inference solvers

Additionally, we wrap some ``pygimli`` code in file
``pygimli_ert_lib.py`` and import it here for conciseness.


.. GENERATED FROM PYTHON SOURCE LINES 81-94

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    import pygimli as pg
    import pygimli.meshtools as mt
    from pygimli.physics import ert

    from cofi import BaseProblem, InversionOptions, Inversion

    from pygimli_ert_lib import *

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 99-102

1. Define the problem
---------------------


.. GENERATED FROM PYTHON SOURCE LINES 105-108

We first define the true model, the survey and map it on a computational
mesh designed for the survey and true anomaly.


.. GENERATED FROM PYTHON SOURCE LINES 108-122

.. code-block:: default


    # PyGIMLi - define measuring scheme, geometry, forward mesh and true model
    scheme = scheme_fwd()
    geometry = geometry_true()
    fmesh = mesh_fwd(scheme, geometry)
    rhomap = markers_to_resistivity()
    model_true = model_vec(rhomap, fmesh)

    # plot the compuational mesh and the true model
    ax=pg.show(fmesh)
    ax[0].set_title("Computational Mesh")
    ax=pg.show(fmesh,data=model_true,label=r"$\Omega m$")
    ax[0].set_title("Resitivity");




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_001.png
         :alt: Computational Mesh
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_002.png
         :alt: Resitivity
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Resitivity')



.. GENERATED FROM PYTHON SOURCE LINES 127-130

Generate the synthetic data as a container with all the necessary
information for plotting.


.. GENERATED FROM PYTHON SOURCE LINES 130-139

.. code-block:: default


    # PyGIMLi - generate data
    survey = ert.simulate(fmesh, res=rhomap, scheme=scheme)

    ax=ert.showERTData(survey,label=r"$\Omega$m")
    ax[0].set_title("Aparent Resitivity")

    y_obs = np.log(survey['rhoa'].array())




.. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_003.png
   :alt: Aparent Resitivity
   :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-170

The inversion can use a different mesh and the mesh to be used should
know nothing about the mesh that was designed based on the true model.
We wrap two kinds of mesh as examples in the library code
``pygimli_ert_lib.py``, namely triangular and rectangular mesh.

Use ``imesh_tri = mesh_inv_triangular(scheme)`` to initialise a
triangular mesh, with the following optional arguments and corresponding
default values:

-  ``start=[-15, 0]``
-  ``end=[65, -30]``

Use ``imesh_rect = mesh_inv_rectangular()`` to initislise a rectangular
mesh, with the following optional arguments and corresponding default
values:

-  ``x_start=-15``
-  ``x_stop=60``
-  ``x_num=11``
-  ``y_start=-30``
-  ``y_stop=0``
-  ``y_num=5``

Here we first demonstrate how to use a *triangular mesh*. Note that this
makes the inversion problem under-determined.


.. GENERATED FROM PYTHON SOURCE LINES 170-177

.. code-block:: default


    # PyGIMLi - quick demo of triangular mesh
    imesh_tri = mesh_inv_triangular(scheme)

    ax=pg.show(imesh_tri)
    ax[0].set_title("Inversion Mesh (triangular)");




.. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_004.png
   :alt: Inversion Mesh (triangular)
   :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inversion Mesh (triangular)')



.. GENERATED FROM PYTHON SOURCE LINES 182-189

Check
`here <https://github.com/inlab-geo/cofi-examples/tree/main/notebooks/pygimli_ert>`__
for inversion examples using triangular mesh.

For the purpose of this notebook, we use a *rectangular mesh* for a
simple demonstration.


.. GENERATED FROM PYTHON SOURCE LINES 189-195

.. code-block:: default


    # PyGIMLi - create mesh for inversion
    imesh = mesh_inv_rectangular()
    ax = pygimli.show(imesh)
    ax[0].set_title("Inversion Mesh (rectangular)");




.. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_005.png
   :alt: Inversion Mesh (rectangular)
   :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inversion Mesh (rectangular)')



.. GENERATED FROM PYTHON SOURCE LINES 200-203

With the inversion mesh created, we now define a starting model, forward
operator and weighting matrix for regularisation using PyGIMLi.


.. GENERATED FROM PYTHON SOURCE LINES 203-213

.. code-block:: default


    # PyGIMLi - define the starting model on the inversion mesh
    model_0 = starting_model(imesh)

    # PyGIMLi - set up a forward operator with the inversion mesh
    forward_operator = forward_oprt(scheme, imesh)

    # PyGIMLi - extract the regularisation weighting matrix
    Wm = weighting_matrix(forward_operator, imesh)








.. GENERATED FROM PYTHON SOURCE LINES 218-232

CoFI and other inference packages require a set of functions that
provide the misfit, the jacobian the residual within the case of scipy
standardised interfaces. All these functions are defined in the library
file ``pygimli_ert_lib.py``, so open this file if you’d like to find out
the details. These functions are:

-  ``get_response``
-  ``get_jacobian``
-  ``get_residuals``
-  ``get_misfit``
-  ``get_regularisation``
-  ``get_gradient``
-  ``get_hessian``


.. GENERATED FROM PYTHON SOURCE LINES 235-239

With all the above forward operations set up with PyGIMLi, we now define
the problem in ``cofi`` by setting the problem information for a
``BaseProblem`` object.


.. GENERATED FROM PYTHON SOURCE LINES 239-255

.. code-block:: default


    # hyperparameters
    lamda = 1

    # cofi problem definition
    ert_problem = BaseProblem()
    ert_problem.name = "Electrical Resistivity Tomography defined through PyGIMLi"
    ert_problem.set_forward(get_response, args=[forward_operator])
    ert_problem.set_jacobian(get_jacobian, args=[forward_operator])
    ert_problem.set_residual(get_residuals, args=[y_obs, forward_operator])
    ert_problem.set_data_misfit(get_misfit, args=[y_obs, forward_operator, True])
    ert_problem.set_regularisation(get_regularisation, lamda=lamda, args=[Wm, True])
    ert_problem.set_gradient(get_gradient, args=[y_obs, forward_operator, lamda, Wm])
    ert_problem.set_hessian(get_hessian, args=[y_obs, forward_operator, lamda, Wm])
    ert_problem.set_initial_model(model_0)








.. GENERATED FROM PYTHON SOURCE LINES 260-262

Review what information is included in the ``BaseProblem`` object:


.. GENERATED FROM PYTHON SOURCE LINES 262-265

.. code-block:: default


    ert_problem.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ========================================================================================
    Summary for inversion problem: Electrical Resistivity Tomography defined through PyGIMLi
    ========================================================================================
    Model shape: (193,)
    ----------------------------------------------------------------------------------------
    List of functions/properties set by you:
    ['gradient', 'hessian', 'residual', 'jacobian', 'data_misfit', 'regularisation', 'forward', 'initial_model', 'model_shape']
    ----------------------------------------------------------------------------------------
    List of functions/properties created based on what you have provided:
    ['objective', 'hessian_times_vector', 'jacobian_times_vector']
    ----------------------------------------------------------------------------------------
    List of functions/properties not set by you:
    ['objective', 'log_posterior', 'log_posterior_with_blobs', 'log_likelihood', 'log_prior', 'hessian_times_vector', 'jacobian_times_vector', 'data', 'data_covariance', 'data_covariance_inv', 'walkers_starting_pos', 'blobs_dtype', 'bounds', 'constraints']




.. GENERATED FROM PYTHON SOURCE LINES 270-276

2. Define the inversion options and run
---------------------------------------

2.1 SciPy’s optimiser (`L-BFGS-B <https://docs.scipy.org/doc/scipy/reference/optimize.minimize-lbfgsb.html#optimize-minimize-lbfgsb>`__)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 276-279

.. code-block:: default


    ert_problem.suggest_solvers();





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Based on what you've provided so far, here are possible solvers:
    {
        "optimisation": [
            "scipy.optimize.minimize",
            "scipy.optimize.least_squares"
        ],
        "linear least square": [],
        "sampling": []
    }

    {'optimisation': ['scipy.optimize.minimize', 'scipy.optimize.least_squares'], 'linear least square': [], 'sampling': []}



.. GENERATED FROM PYTHON SOURCE LINES 281-286

.. code-block:: default


    inv_options = InversionOptions()
    inv_options.set_tool("scipy.optimize.minimize")
    inv_options.set_params(method="L-BFGS-B")








.. GENERATED FROM PYTHON SOURCE LINES 291-293

Review what’s been defined for the inversion we are about to run:


.. GENERATED FROM PYTHON SOURCE LINES 293-296

.. code-block:: default


    inv_options.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    =============================
    Summary for inversion options
    =============================
    Solving method: None set
    Use `suggest_solving_methods()` to check available solving methods.
    -----------------------------
    Backend tool: `scipy.optimize.minimize` - SciPy's optimisers that minimises a scalar function with respect to one or more variables, check SciPy's documentation page for a list of methods
    References: ['https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html']
    Use `suggest_tools()` to check available backend tools.
    -----------------------------
    Solver-specific parameters: 
    method = L-BFGS-B
    Use `suggest_solver_params()` to check required/optional solver-specific parameters.




.. GENERATED FROM PYTHON SOURCE LINES 298-303

.. code-block:: default


    inv = Inversion(ert_problem, inv_options)
    inv_result = inv.run()
    inv_result.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/jiawen/opt/mambaforge/envs/cofi_dev/lib/python3.10/site-packages/scipy/optimize/_minimize.py:548: RuntimeWarning: Method L-BFGS-B does not use Hessian information (hess).
      warn('Method %s does not use Hessian information (hess).' % method,
    /home/jiawen/opt/mambaforge/envs/cofi_dev/lib/python3.10/site-packages/scipy/optimize/_minimize.py:554: RuntimeWarning: Method L-BFGS-B does not use Hessian-vector product information (hessp).
      warn('Method %s does not use Hessian-vector product '
    data misfit: 1330.5823132055143
    raw regularisation: 0.0
    data misfit: 1325.9161253098425
    raw regularisation: 3.2377373769833095
    data misfit: 1310.1261871672973
    raw regularisation: 80.94343442458147
    data misfit: 1322.2597025362873
    raw regularisation: 10.893411237920638
    data misfit: 1325.135359647151
    raw regularisation: 4.464129155274968
    data misfit: 1325.7525438840648
    raw regularisation: 3.4772594966141877
    data misfit: 1325.9161253098425
    raw regularisation: 3.2377373769833095
    data misfit: 1264.5225380924262
    raw regularisation: 1012.8214028054465
    data misfit: 1310.700512532451
    raw regularisation: 54.45078833447126
    data misfit: 1322.5616608385817
    raw regularisation: 8.579842870886884
    data misfit: 1325.2029180298891
    raw regularisation: 4.127364465120897
    data misfit: 1325.7658184365007
    raw regularisation: 3.414483516040101
    data misfit: 1325.8845086272324
    raw regularisation: 3.274441054179703
    data misfit: 1325.9094702098662
    raw regularisation: 3.2454336372595463
    data misfit: 1325.9147261583928
    raw regularisation: 3.239354559537397
    data misfit: 1325.915830240955
    raw regularisation: 3.2380773354498102
    data misfit: 1325.9160639187135
    raw regularisation: 3.2378088556493587
    data misfit: 1325.916113938105
    raw regularisation: 3.237752400957324
    data misfit: 1325.916120497734
    raw regularisation: 3.237740522655236
    data misfit: 1325.9161186890526
    raw regularisation: 3.237742990576089
    data misfit: 1325.9161205294151
    raw regularisation: 3.237741038911201
    data misfit: 1325.9161204947036
    raw regularisation: 3.2377406275063683
    data misfit: 1325.916120497734
    raw regularisation: 3.237740522655236
    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    fun: 1329.1538610203893
    jac: [ 3.92351570e-02  3.62388506e-01  1.32583944e-01  3.30928212e-01
      3.97340149e-01  1.92100743e-01  6.77337020e-01  4.43997638e-01
      8.19917922e-02  4.11619499e-01  2.44658540e-01  1.19599337e-01
      1.74484753e-01 -1.28990864e-01  3.89933066e-01  4.58226536e-03
      3.65620806e-01 -7.39992357e-02  1.08456923e-01  1.05594715e+00
      1.14109340e-01  2.71480697e-01  2.78963365e-01  3.14252930e-01
      7.47290444e-02  3.29102233e-01  1.97835111e-01  2.21707694e-01
      2.97465341e-02  2.38245926e-01  9.22820264e-02  4.63133557e-01
      8.24896273e-01  8.04083127e-02  1.29879330e-01  8.04685204e-02
      4.93248857e-01  3.57741288e-01  2.80073158e-01  1.60919373e-01
      9.84182886e-02  2.71168217e-01  8.74677549e-02  7.12422796e-01
      1.86988200e-01  4.22983650e-02  3.98849382e-01  2.18123720e-02
      9.42282360e-01 -8.35227074e-02  5.79934502e-01  1.72209870e-01
     -8.96485509e-02  2.19287593e-01 -1.07436279e-02  9.82549965e-01
      9.58239015e-01  1.52158657e-02  8.36710140e-02  3.83902856e-01
      2.57084669e-01  6.82318157e-01  2.86973904e-02  3.31625824e-01
      7.72620516e-02  9.77413725e-02  5.62506746e-01  3.44636375e-01
      1.09217725e-01  9.05857294e-02  1.45012116e-01  7.15466753e-01
      1.26200740e-01  3.03179638e-01  2.27104636e-01  5.90428244e-01
      3.24249640e-01  8.48605176e-01  1.61137664e+00  2.10324707e+00
      7.11315457e-01  3.74521643e-01  2.15206911e-02  3.78276932e-01
      1.25067377e+00  1.08548366e-02  4.22733481e-01  3.75235378e-01
      1.80051271e-01  2.10327639e+00  4.28376046e-01  2.28656687e-01
      5.42081199e-01  8.35450118e-01  5.58655902e-02  4.71954825e-01
      7.54514195e-01  1.40324178e-01  1.15598955e+00  3.06897737e-01
      1.59170651e-01  9.41471794e-02  1.71919645e-01 -8.67187966e-02
      4.94027303e-01  1.07462881e-01  2.84755230e-01  4.88834790e-01
      2.13315862e-01  1.90272734e-01  1.59639769e-01  9.36167293e-02
      7.07863139e-02  1.51042500e-01  5.99603520e-02  8.30540815e-02
      1.47584812e-01  6.15723040e-02  6.89660829e-02  1.67737328e-01
      1.57804308e-01  7.96142635e-02  1.04373850e-01  1.96068288e-01
      6.78754853e-02  1.06074442e-01  6.29149780e-02  1.94640079e-01
      2.17064613e-01  1.07821304e-01  1.29347134e-01  1.38623420e-01
      1.17137816e-01  6.16863116e-02  1.91775230e-01  4.95403315e-02
      2.79664895e-02  7.62283168e-02  6.11970086e-02  1.02728439e-01
      1.10363422e-01  2.27824974e-01  9.04379932e-02  8.87483243e-02
      7.88690411e-02  3.07730445e-02  9.23813854e-02  1.23285181e-01
      5.23061901e-02  3.25339014e-02  7.51294865e-02  2.54329119e-01
      1.13188381e-01  6.97493225e-01  7.08745412e-01  3.16719158e-01
     -3.97754993e-01 -1.12395643e+00 -1.45609689e+00 -1.17269297e+00
     -3.74229885e-01  4.04139239e-01  7.57276587e-01  1.70089848e+00
      1.76487738e+00 -4.17015448e-02 -3.09836968e+00 -6.03462728e+00
     -7.65652180e+00 -6.82705218e+00 -3.41920935e+00  4.31794017e-01
      1.93378916e+00  4.92713297e+00  6.21985675e+00 -9.41743459e+00
     -2.39968648e+01 -3.78363284e+01 -4.68603859e+01 -4.55822555e+01
     -3.03768008e+01 -1.93291961e+00  6.60189576e+00  1.11733850e+01
      8.24522817e+01 -1.02338206e+02  1.66985970e+01 -2.76560195e+01
      7.16665718e+00 -3.47087588e-01 -9.67104924e+01  2.44342347e+01
      3.57606475e+01]
    nfev: 23
    njev: 23
    nit: 2
    status: 0
    message: CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH
    hess_inv: <193x193 LbfgsInvHessProduct with dtype=float64>
    model: [79.99980835 79.99823626 79.99935212 79.99839859 79.99806961 79.9990644
     79.99668926 79.99782263 79.99960053 79.99800633 79.99881699 79.99941897
     79.99914864 80.0005998  79.99809254 79.9999789  79.9982188  80.00036053
     79.99947942 79.99486696 79.99944329 79.99867589 79.99864677 79.99846803
     79.99963586 79.99839298 79.99903489 79.99891866 79.99984889 79.9988416
     79.99955095 79.99772371 79.99618302 79.99961111 79.9993659  79.99960826
     79.99758297 79.99825859 79.9986329  79.99923394 79.999521   79.99867842
     79.99957144 79.99653902 79.99910191 79.99979501 79.99805327 79.99989145
     79.99547144 80.0003859  79.99716204 79.9991583  80.0004125  79.99892832
     80.0000525  79.9952128  79.99534709 79.99991625 79.99959056 79.9981229
     79.99875961 79.99668331 79.99986204 79.99839434 79.99962697 79.99952368
     79.9972548  79.99832313 79.9994702  79.99956054 79.99929365 79.99651322
     79.99938589 79.99853098 79.99889681 79.9971208  79.99841751 79.99588466
     79.99217012 79.98983095 79.99653428 79.99816622 79.9998969  79.99814895
     79.99390984 79.99994774 79.9979332  79.99816349 79.99912074 79.99053395
     79.99797038 79.99888874 79.99735318 79.99593618 79.9997298  79.99770155
     79.9963349  79.99931969 79.99435482 79.99850015 79.99922475 79.99954117
     79.99916028 80.00042513 79.99759746 79.9994836  79.99861562 79.99761112
     79.99896195 79.99907492 79.99922218 79.99954454 79.99965433 79.99926469
     79.99970893 79.99959566 79.99927966 79.99969957 79.99966399 79.99918292
     79.99923016 79.99961359 79.99949141 79.99904405 79.99967025 79.99948209
     79.9996949  79.99905632 79.99894113 79.99947734 79.99937371 79.99932009
     79.99943135 79.99969945 79.999066   79.99975951 79.99986485 79.99962937
     79.99970166 79.99949728 79.99946495 79.99889448 79.99955821 79.99956523
     79.99961703 79.99985209 79.99954952 79.99939785 79.99974813 79.99984263
     79.99963208 79.99875655 79.99945256 79.99660262 79.99655228 79.99844538
     80.00189735 80.00540191 80.00699155 80.00560762 80.00174775 79.99800411
     79.99630285 79.99172369 79.99142241 79.99998678 80.01467842 80.02876076
     80.03648411 80.03242493 80.01600852 79.99772071 79.99057473 79.97586519
     79.97101159 80.04373948 80.11835609 80.18457143 80.22966444 80.22364374
     80.14663693 80.00928874 79.9679834  79.94656221 79.56607168 80.53739987
     79.89002782 80.16064328 79.96435443 79.9983894  80.49881017 79.85987202
     79.82434266]




.. GENERATED FROM PYTHON SOURCE LINES 305-308

.. code-block:: default


    inv_result.success





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 313-315

Plot the results:


.. GENERATED FROM PYTHON SOURCE LINES 315-338

.. code-block:: default


    ax=pg.show(
        fmesh,
        data=(model_true),
        label=r"$\Omega m$"
    )
    ax[0].set_title("True model")

    ax=pg.show(
        imesh,
        data=(model_0),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Starting model")


    ax=pg.show(
        imesh,
        data=(inv_result.model),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Inferred model");




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_006.png
         :alt: True model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_007.png
         :alt: Starting model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_008.png
         :alt: Inferred model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inferred model')



.. GENERATED FROM PYTHON SOURCE LINES 343-351

2.2 A custom `Newton’s optimisation <https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization>`__ approach
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we switch to a Newton’s iterative approach written by ourselves, so
you’ll have a closer look at what’s happening in the loop.

First of all, define our own solver.


.. GENERATED FROM PYTHON SOURCE LINES 351-382

.. code-block:: default


    from cofi.solvers import BaseSolver

    class MyNewtonSolver(BaseSolver):
        def __init__(self, inv_problem, inv_options):
            __params = inv_options.get_params()
            self._niter = __params["niter"]
            self._step = __params["step"]
            self._verbose = __params["verbose"]
            self._model_0 = inv_problem.initial_model
            self._gradient = inv_problem.gradient
            self._hessian = inv_problem.hessian
            self._misfit = inv_problem.data_misfit if inv_problem.data_misfit_defined else None
            self._reg = inv_problem.regularisation if inv_problem.regularisation_defined else None
            self._obj = inv_problem.objective if inv_problem.objective_defined else None
        
        def __call__(self):
            current_model = np.array(self._model_0)
            for i in range(self._niter):
                term1 = self._hessian(current_model)
                term2 = - self._gradient(current_model)
                model_update = np.linalg.solve(term1, term2)
                current_model = np.array(current_model + self._step * model_update)
                if self._verbose:
                    print("-" * 80)
                    print(f"Iteration {i+1}")
                    if self._misfit: self._misfit(current_model)
                    if self._reg: self._reg(current_model)
                    # if self._obj: print("objective func:", self._obj(current_model))
            return {"model": current_model, "success": True}








.. GENERATED FROM PYTHON SOURCE LINES 387-389

Now, make use of this custom solver and run inversion again:


.. GENERATED FROM PYTHON SOURCE LINES 389-398

.. code-block:: default


    inv_options_own_solver = InversionOptions()
    inv_options_own_solver.set_tool(MyNewtonSolver)
    inv_options_own_solver.set_params(niter=100, step=1, verbose=True)

    inv_own_solver = Inversion(ert_problem, inv_options_own_solver)
    inv_own_solver_res = inv_own_solver.run()
    inv_own_solver_res.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    --------------------------------------------------------------------------------
    Iteration 1
    data misfit: 1323.2573456559178
    raw regularisation: 94.16649894082346
    --------------------------------------------------------------------------------
    Iteration 2
    data misfit: 1317.4272078955055
    raw regularisation: 229.48689013717404
    --------------------------------------------------------------------------------
    Iteration 3
    data misfit: 1312.3875589366344
    raw regularisation: 369.5349248914488
    --------------------------------------------------------------------------------
    Iteration 4
    data misfit: 1307.8671166847114
    raw regularisation: 516.2007891101762
    --------------------------------------------------------------------------------
    Iteration 5
    data misfit: 1303.743319848044
    raw regularisation: 670.4903777355049
    --------------------------------------------------------------------------------
    Iteration 6
    data misfit: 1299.9466685775733
    raw regularisation: 831.5091039759487
    --------------------------------------------------------------------------------
    Iteration 7
    data misfit: 1296.4309036449204
    raw regularisation: 997.5082751621485
    --------------------------------------------------------------------------------
    Iteration 8
    data misfit: 1293.1619801802674
    raw regularisation: 1166.564947628923
    --------------------------------------------------------------------------------
    Iteration 9
    data misfit: 1290.1131651283702
    raw regularisation: 1336.9012543806923
    --------------------------------------------------------------------------------
    Iteration 10
    data misfit: 1287.2625905857285
    raw regularisation: 1506.99754808286
    --------------------------------------------------------------------------------
    Iteration 11
    data misfit: 1284.5917073686364
    raw regularisation: 1675.6249313816004
    --------------------------------------------------------------------------------
    Iteration 12
    data misfit: 1282.0845684974122
    raw regularisation: 1841.808724002244
    --------------------------------------------------------------------------------
    Iteration 13
    data misfit: 1279.72758726934
    raw regularisation: 2004.7798568302264
    --------------------------------------------------------------------------------
    Iteration 14
    data misfit: 1277.5082383584652
    raw regularisation: 2163.9853001940587
    --------------------------------------------------------------------------------
    Iteration 15
    data misfit: 1275.4156233169629
    raw regularisation: 2319.011404421769
    --------------------------------------------------------------------------------
    Iteration 16
    data misfit: 1273.4399061872637
    raw regularisation: 2469.5707415202305
    --------------------------------------------------------------------------------
    Iteration 17
    data misfit: 1271.572182146506
    raw regularisation: 2615.47764919727
    --------------------------------------------------------------------------------
    Iteration 18
    data misfit: 1269.8043270518829
    raw regularisation: 2756.6273353985107
    --------------------------------------------------------------------------------
    Iteration 19
    data misfit: 1268.1289328827136
    raw regularisation: 2892.9796138069983
    --------------------------------------------------------------------------------
    Iteration 20
    data misfit: 1266.5392122914748
    raw regularisation: 3024.5457331835137
    --------------------------------------------------------------------------------
    Iteration 21
    data misfit: 1265.0289270737524
    raw regularisation: 3151.3777976447964
    --------------------------------------------------------------------------------
    Iteration 22
    data misfit: 1263.59235625766
    raw regularisation: 3273.559462237167
    --------------------------------------------------------------------------------
    Iteration 23
    data misfit: 1262.2242612453867
    raw regularisation: 3391.1989035331053
    --------------------------------------------------------------------------------
    Iteration 24
    data misfit: 1260.9198103917888
    raw regularisation: 3504.4229194278037
    --------------------------------------------------------------------------------
    Iteration 25
    data misfit: 1259.6746162533798
    raw regularisation: 3613.372083529057
    --------------------------------------------------------------------------------
    Iteration 26
    data misfit: 1258.4846416967143
    raw regularisation: 3718.196824809679
    --------------------------------------------------------------------------------
    Iteration 27
    data misfit: 1257.3462000710108
    raw regularisation: 3819.054172101203
    --------------------------------------------------------------------------------
    Iteration 28
    data misfit: 1256.2559545178615
    raw regularisation: 3916.105153055614
    --------------------------------------------------------------------------------
    Iteration 29
    data misfit: 1255.2108762586258
    raw regularisation: 4009.5429134188626
    --------------------------------------------------------------------------------
    Iteration 30
    data misfit: 1254.2080795079648
    raw regularisation: 4099.467029727886
    --------------------------------------------------------------------------------
    Iteration 31
    data misfit: 1253.245265739411
    raw regularisation: 4186.071637363276
    --------------------------------------------------------------------------------
    Iteration 32
    data misfit: 1252.3200728082693
    raw regularisation: 4269.518772002468
    --------------------------------------------------------------------------------
    Iteration 33
    data misfit: 1251.4304611296193
    raw regularisation: 4349.964318230037
    --------------------------------------------------------------------------------
    Iteration 34
    data misfit: 1250.5746056527285
    raw regularisation: 4427.560530250052
    --------------------------------------------------------------------------------
    Iteration 35
    data misfit: 1249.7508491706976
    raw regularisation: 4502.455466111917
    --------------------------------------------------------------------------------
    Iteration 36
    data misfit: 1248.9577236393977
    raw regularisation: 4574.793052995456
    --------------------------------------------------------------------------------
    Iteration 37
    data misfit: 1248.1939031644713
    raw regularisation: 4644.711778467214
    --------------------------------------------------------------------------------
    Iteration 38
    data misfit: 1247.4582109574667
    raw regularisation: 4712.345412355451
    --------------------------------------------------------------------------------
    Iteration 39
    data misfit: 1246.7496160451908
    raw regularisation: 4777.822539626358
    --------------------------------------------------------------------------------
    Iteration 40
    data misfit: 1246.0671902368708
    raw regularisation: 4841.2665831488575
    --------------------------------------------------------------------------------
    Iteration 41
    data misfit: 1245.4101253298554
    raw regularisation: 4902.795797567037
    --------------------------------------------------------------------------------
    Iteration 42
    data misfit: 1244.7777280986438
    raw regularisation: 4962.523332574539
    --------------------------------------------------------------------------------
    Iteration 43
    data misfit: 1244.172934868425
    raw regularisation: 5020.302325309834
    --------------------------------------------------------------------------------
    Iteration 44
    data misfit: 1243.5849508157453
    raw regularisation: 5076.912244838667
    --------------------------------------------------------------------------------
    Iteration 45
    data misfit: 1243.022685341977
    raw regularisation: 5131.906100727638
    --------------------------------------------------------------------------------
    Iteration 46
    data misfit: 1242.4836124110263
    raw regularisation: 5185.473955842417
    --------------------------------------------------------------------------------
    Iteration 47
    data misfit: 1241.9671403420473
    raw regularisation: 5237.724970885688
    --------------------------------------------------------------------------------
    Iteration 48
    data misfit: 1241.4729886352286
    raw regularisation: 5288.749407095661
    --------------------------------------------------------------------------------
    Iteration 49
    data misfit: 1241.0010159526396
    raw regularisation: 5338.629957980002
    --------------------------------------------------------------------------------
    Iteration 50
    data misfit: 1240.5512111466223
    raw regularisation: 5387.439914032409
    --------------------------------------------------------------------------------
    Iteration 51
    data misfit: 1240.1233992311563
    raw regularisation: 5435.263793964285
    --------------------------------------------------------------------------------
    Iteration 52
    data misfit: 1239.7178048182934
    raw regularisation: 5482.1619037643095
    --------------------------------------------------------------------------------
    Iteration 53
    data misfit: 1239.3344989145405
    raw regularisation: 5528.201597430863
    --------------------------------------------------------------------------------
    Iteration 54
    data misfit: 1238.9736889734957
    raw regularisation: 5573.445387827213
    --------------------------------------------------------------------------------
    Iteration 55
    data misfit: 1238.6355974110375
    raw regularisation: 5617.9522869546045
    --------------------------------------------------------------------------------
    Iteration 56
    data misfit: 1238.3205438671885
    raw regularisation: 5661.777658921583
    --------------------------------------------------------------------------------
    Iteration 57
    data misfit: 1238.0288861056874
    raw regularisation: 5704.97405277719
    --------------------------------------------------------------------------------
    Iteration 58
    data misfit: 1237.761059274413
    raw regularisation: 5747.590652959605
    --------------------------------------------------------------------------------
    Iteration 59
    data misfit: 1237.5175534417103
    raw regularisation: 5789.673659980754
    --------------------------------------------------------------------------------
    Iteration 60
    data misfit: 1237.2989191776894
    raw regularisation: 5831.264819971265
    --------------------------------------------------------------------------------
    Iteration 61
    data misfit: 1237.10571670424
    raw regularisation: 5872.407905075272
    --------------------------------------------------------------------------------
    Iteration 62
    data misfit: 1236.9386727019948
    raw regularisation: 5913.13714644387
    --------------------------------------------------------------------------------
    Iteration 63
    data misfit: 1236.7984970924017
    raw regularisation: 5953.487375248475
    --------------------------------------------------------------------------------
    Iteration 64
    data misfit: 1236.6859829812527
    raw regularisation: 5993.489679937574
    --------------------------------------------------------------------------------
    Iteration 65
    data misfit: 1236.6019849212175
    raw regularisation: 6033.1721401680925
    --------------------------------------------------------------------------------
    Iteration 66
    data misfit: 1236.547412879317
    raw regularisation: 6072.559675286473
    --------------------------------------------------------------------------------
    Iteration 67
    data misfit: 1236.5232458574626
    raw regularisation: 6111.673992080612
    --------------------------------------------------------------------------------
    Iteration 68
    data misfit: 1236.53051403514
    raw regularisation: 6150.533556606983
    --------------------------------------------------------------------------------
    Iteration 69
    data misfit: 1236.5703037115943
    raw regularisation: 6189.153454168602
    --------------------------------------------------------------------------------
    Iteration 70
    data misfit: 1236.6437525078247
    raw regularisation: 6227.545327548708
    --------------------------------------------------------------------------------
    Iteration 71
    data misfit: 1236.7520474899613
    raw regularisation: 6265.7172965982045
    --------------------------------------------------------------------------------
    Iteration 72
    data misfit: 1236.896428823767
    raw regularisation: 6303.673869928626
    --------------------------------------------------------------------------------
    Iteration 73
    data misfit: 1237.0781780980235
    raw regularisation: 6341.417179890487
    --------------------------------------------------------------------------------
    Iteration 74
    data misfit: 1237.2985915559657
    raw regularisation: 6378.941133810582
    --------------------------------------------------------------------------------
    Iteration 75
    data misfit: 1237.55899685532
    raw regularisation: 6416.241521869682
    --------------------------------------------------------------------------------
    Iteration 76
    data misfit: 1237.8607311551693
    raw regularisation: 6453.307665898559
    --------------------------------------------------------------------------------
    Iteration 77
    data misfit: 1238.2051441825095
    raw regularisation: 6490.12550951153
    --------------------------------------------------------------------------------
    Iteration 78
    data misfit: 1238.5935523971466
    raw regularisation: 6526.6774777310975
    --------------------------------------------------------------------------------
    Iteration 79
    data misfit: 1239.0272802889974
    raw regularisation: 6562.942600109759
    --------------------------------------------------------------------------------
    Iteration 80
    data misfit: 1239.5075683999992
    raw regularisation: 6598.8967562971175
    --------------------------------------------------------------------------------
    Iteration 81
    data misfit: 1240.0356314835738
    raw regularisation: 6634.512929780089
    --------------------------------------------------------------------------------
    Iteration 82
    data misfit: 1240.6125754147033
    raw regularisation: 6669.761550399447
    --------------------------------------------------------------------------------
    Iteration 83
    data misfit: 1241.239422576983
    raw regularisation: 6704.610904417102
    --------------------------------------------------------------------------------
    Iteration 84
    data misfit: 1241.9170688785027
    raw regularisation: 6739.027636768318
    --------------------------------------------------------------------------------
    Iteration 85
    data misfit: 1242.6462648081335
    raw regularisation: 6772.977257236552
    --------------------------------------------------------------------------------
    Iteration 86
    data misfit: 1243.4275788010427
    raw regularisation: 6806.424672759121
    --------------------------------------------------------------------------------
    Iteration 87
    data misfit: 1244.2613993834161
    raw regularisation: 6839.33481170003
    --------------------------------------------------------------------------------
    Iteration 88
    data misfit: 1245.1479010321339
    raw regularisation: 6871.673252831409
    --------------------------------------------------------------------------------
    Iteration 89
    data misfit: 1246.0869916200772
    raw regularisation: 6903.4068123995
    --------------------------------------------------------------------------------
    Iteration 90
    data misfit: 1247.0783575553355
    raw regularisation: 6934.504057716883
    --------------------------------------------------------------------------------
    Iteration 91
    data misfit: 1248.1213301833316
    raw regularisation: 6964.935994209414
    --------------------------------------------------------------------------------
    Iteration 92
    data misfit: 1249.2150258185932
    raw regularisation: 6994.676436648246
    --------------------------------------------------------------------------------
    Iteration 93
    data misfit: 1250.3581342942018
    raw regularisation: 7023.702467920259
    --------------------------------------------------------------------------------
    Iteration 94
    data misfit: 1251.5491124227058
    raw regularisation: 7051.994816060383
    --------------------------------------------------------------------------------
    Iteration 95
    data misfit: 1252.7859938723743
    raw regularisation: 7079.538060237003
    --------------------------------------------------------------------------------
    Iteration 96
    data misfit: 1254.0664580693774
    raw regularisation: 7106.320841162122
    --------------------------------------------------------------------------------
    Iteration 97
    data misfit: 1255.3878636473603
    raw regularisation: 7132.335878846433
    --------------------------------------------------------------------------------
    Iteration 98
    data misfit: 1256.7471812485787
    raw regularisation: 7157.580069910324
    --------------------------------------------------------------------------------
    Iteration 99
    data misfit: 1258.1409978664863
    raw regularisation: 7182.054214087828
    --------------------------------------------------------------------------------
    Iteration 100
    data misfit: 1259.5656909054114
    raw regularisation: 7205.76369801504
    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    model: [ 63.61653559  60.29177801  61.12604649  69.34743985  60.67679675
      66.36507416  54.01877481  55.35073647  72.09487827  66.68777448
      68.72188501  75.78738389  71.74184773  85.96126327  56.70112041
      81.09084206  57.58093706  84.06440749  74.41954442  62.18764546
      75.27197187  61.46592972  58.31103025  51.91246775  55.15054632
      53.9186066   64.29741734  63.26482182  79.83373538  52.231906
      76.0801539   48.93722199  47.92940164  72.22036887  55.27164512
      74.09392152  50.49809986  56.12822051  53.36650922  48.36825432
      67.47748564  53.29470322  79.10506776  56.97576079  64.18727292
      65.84222781  53.26154588  81.46542736  52.35220077  84.14535893
      57.78301323  63.44460554  85.17300151  53.87873878  82.17946986
      55.57142207  53.44180125  82.30590891  79.42804417  50.59237499
      73.05899401  60.49206178  66.35076757  58.81871673  56.84014265
      65.36529881  64.64449541  62.58053318  59.15950169  77.14193434
      71.01074441  55.63599771  54.63449213  68.65661579  59.28287322
      50.09563279  54.16797784  66.35926126  55.76139792  60.48693708
      58.11001811  51.60683458  79.52118342  52.29974511  54.59160085
      81.1398818   49.89218576  70.86936143  75.5638294   53.50770837
      52.94916852  71.15365315  65.96481067  53.7822845   74.0517984
      57.04984211  54.79504964  59.68792991  52.72811979  62.37095928
      58.71818926  78.07966678  73.01620535  83.84826037  61.68668943
      77.97561717  60.64609227  64.98237699  60.94642223  58.91704416
      66.32297521  68.42236412  76.02112256  61.70440521  68.12094399
      70.89143062  72.48653844  66.25251929  69.73219049  73.81000711
      74.61464867  74.56070044  72.46891729  60.6492267   59.69175035
      54.85112359  55.50812562  58.40425401  59.06804037  66.50726369
      63.81926625  58.65561644  59.53799173  56.15044258  55.77227989
      60.77800367  64.51419234  62.23002225  63.71793471  77.79728827
      73.5623573   66.75784197  66.88031171  67.94028697  64.45292283
      66.22813632  71.40743688  71.52673785  69.71966442  62.74689935
      61.90027944  68.94840972  69.11731109  63.06604541  68.24997692
      75.5550259   82.41178498  87.49239299  90.00379533  89.33919687
      85.37154345  79.021434    72.92507087  59.6615622   66.20057028
      77.5294828   86.92109857  93.30640089  96.91402404  96.47747543
      90.74957243  80.11678924  70.79239703  53.68204924  60.70366355
      81.67718122  93.61025132 100.00180546 104.84703802 105.53588186
      98.90027031  80.03960867  65.06340472  45.98291596  45.63266225
      80.77629126  83.87147472  82.18865104  84.0460425   85.92977998
      91.96723166  72.16718568  53.38529161]




.. GENERATED FROM PYTHON SOURCE LINES 403-405

Plot the results:


.. GENERATED FROM PYTHON SOURCE LINES 405-428

.. code-block:: default


    ax=pg.show(
        fmesh,
        data=(model_true),
        label=r"$\Omega m$"
    )
    ax[0].set_title("True model")

    ax=pg.show(
        imesh,
        data=(model_0),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Starting model")


    ax=pg.show(
        imesh,
        data=(inv_own_solver_res.model),
        label=r"$\Omega m$"
    )
    ax[0].set_title("Inferred model");




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_009.png
         :alt: True model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_010.png
         :alt: Starting model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_011.png
         :alt: Inferred model
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_011.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Inferred model')



.. GENERATED FROM PYTHON SOURCE LINES 433-444

2.3 Bayesian sampling with emcee (exploration)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

CoFI needs more assumptions about the problem for a sampler to work -
these are the log of posterior distribution density and walkers’
starting positions.

For the log posterior, we define here by specifying ``log_prior`` and
``log_likelihood``. And CoFI will combine them to get the
``log_posterior``.


.. GENERATED FROM PYTHON SOURCE LINES 444-472

.. code-block:: default


    # hyperparameters
    nwalkers = 32
    nsteps = 10

    # define log_likelihood
    sigma = 1.0                                     # common noise standard deviation
    Cdinv = np.eye(len(y_obs))/(sigma**2)           # inverse data covariance matrix
    def log_likelihood(model):
        residual = ert_problem.residual(model)
        return -0.5 * residual @ (Cdinv @ residual).T

    # define log_prior
    m_lower_bound = np.zeros(model_0.shape)         # lower bound for uniform prior
    m_upper_bound = np.ones(model_0.shape) * 250    # upper bound for uniform prior
    def log_prior(model):                           # uniform distribution
        for i in range(len(m_lower_bound)):
            if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
        return 0.0 # model lies within bounds -> return log(1)

    # define walkers' starting positions
    walkers_start = model_0 + 1e-6 * np.random.randn(nwalkers, model_0.shape[0])

    # define them into cofi's BaseProblem object
    ert_problem.set_log_likelihood(log_likelihood)
    ert_problem.set_log_prior(log_prior)
    ert_problem.set_walkers_starting_pos(walkers_start)








.. GENERATED FROM PYTHON SOURCE LINES 477-479

As usual, specify how you’d like to run the inversion and run it.


.. GENERATED FROM PYTHON SOURCE LINES 479-492

.. code-block:: default


    # define inversion options
    inv_options_emcee = InversionOptions()
    inv_options_emcee.set_tool("emcee")
    inv_options_emcee.set_params(nwalkers=nwalkers, nsteps=nsteps, progress=True)

    from emcee.moves import GaussianMove
    inv_options_emcee.set_params(moves=GaussianMove(1))

    # run the inversion
    inv_rect_emcee = Inversion(ert_problem, inv_options_emcee)
    inv_rect_emcee_res = inv_rect_emcee.run()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:07<01:03,  7.08s/it]     20%|##        | 2/10 [00:14<00:56,  7.08s/it]     30%|###       | 3/10 [00:21<00:49,  7.08s/it]     40%|####      | 4/10 [00:28<00:42,  7.08s/it]     50%|#####     | 5/10 [00:35<00:35,  7.08s/it]     60%|######    | 6/10 [00:42<00:28,  7.08s/it]     70%|#######   | 7/10 [00:49<00:21,  7.10s/it]     80%|########  | 8/10 [00:56<00:14,  7.09s/it]     90%|######### | 9/10 [01:03<00:07,  7.09s/it]    100%|##########| 10/10 [01:10<00:00,  7.08s/it]    100%|##########| 10/10 [01:10<00:00,  7.08s/it]




.. GENERATED FROM PYTHON SOURCE LINES 497-503

Let’s sub-sample 10 models from the posterior ensemble and plot them
out.

You’ll see that the results are not as good. That’s because we’ve used
only 32 walkers and 10 sampling steps.


.. GENERATED FROM PYTHON SOURCE LINES 503-506

.. code-block:: default


    sampler = inv_rect_emcee_res.sampler








.. GENERATED FROM PYTHON SOURCE LINES 508-519

.. code-block:: default


    flat_samples = sampler.get_chain(discard=5, flat=True)
    indices = np.random.randint(len(flat_samples), size=10) # get a random selection from posterior ensemble
    for idx in indices:
        ax=pg.show(
            imesh,
            data=(flat_samples[idx]),
            label=r"$\Omega m$"
        )
        ax[0].set_title(f"Inferred model - sample {idx}");




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_012.png
         :alt: Inferred model - sample 0
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_013.png
         :alt: Inferred model - sample 130
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_014.png
         :alt: Inferred model - sample 85
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_015.png
         :alt: Inferred model - sample 61
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_016.png
         :alt: Inferred model - sample 63
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_016.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_017.png
         :alt: Inferred model - sample 144
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_017.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_018.png
         :alt: Inferred model - sample 125
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_018.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_019.png
         :alt: Inferred model - sample 104
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_019.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_020.png
         :alt: Inferred model - sample 61
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_020.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_021.png
         :alt: Inferred model - sample 34
         :srcset: /cofi-examples/utils/sphinx_gallery/generated/images/sphx_glr_pygimli_ert_021.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 524-527

Not satisfied with the results? Go back to the code cell under 2.3 and
try with bigger numbers of walkers and steps 😉


.. GENERATED FROM PYTHON SOURCE LINES 530-535

--------------

Watermark
---------


.. GENERATED FROM PYTHON SOURCE LINES 535-541

.. code-block:: default


    watermark_list = ["cofi", "numpy", "scipy", "pygimli", "matplotlib", "emcee", "arviz"]
    for pkg in watermark_list:
        pkg_var = __import__(pkg)
        print(pkg, getattr(pkg_var, "__version__"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    cofi 0.1.2.dev7
    numpy 1.21.6
    scipy 1.8.1
    pygimli 1.2.6
    matplotlib 3.5.2
    emcee 3.1.2
    arviz 0.12.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  23.018 seconds)


.. _sphx_glr_download_cofi-examples_utils_sphinx_gallery_generated_pygimli_ert.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: pygimli_ert.py <pygimli_ert.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: pygimli_ert.ipynb <pygimli_ert.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
