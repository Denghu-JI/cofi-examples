
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "cofi-examples/tools/sphinx_gallery/generated/xray_tomography.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_cofi-examples_tools_sphinx_gallery_generated_xray_tomography.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_cofi-examples_tools_sphinx_gallery_generated_xray_tomography.py:


Xray Tomography
===============

.. raw:: html

   <!-- Please leave the cell below as it is -->

.. GENERATED FROM PYTHON SOURCE LINES 13-16

Linear travel time tomography based on x-ray tracers. In this notebook,
we use ``cofi`` to run a linear system solver for this problem.


.. GENERATED FROM PYTHON SOURCE LINES 19-21

{{ badge }}


.. GENERATED FROM PYTHON SOURCE LINES 24-43

.. raw:: html

   <!-- Again, please don't touch the markdown cell above. We'll generate badge 
        automatically from the above cell. -->

.. raw:: html

   <!-- This cell describes things related to environment setup, so please add more text 
        if something special (not listed below) is needed to run this notebook -->

..

   If you are running this notebook locally, make sure you’ve followed
   `steps
   here <https://github.com/inlab-geo/cofi-examples#run-the-examples-with-cofi-locally>`__
   to set up the environment. (This
   `environment.yml <https://github.com/inlab-geo/cofi-examples/blob/main/envs/environment.yml>`__
   file specifies a list of packages required to run the notebooks)


.. GENERATED FROM PYTHON SOURCE LINES 46-49

0. Import modules
-----------------


.. GENERATED FROM PYTHON SOURCE LINES 49-59

.. code-block:: default


    # -------------------------------------------------------- #
    #                                                          #
    #     Uncomment below to set up environment on "colab"     #
    #                                                          #
    # -------------------------------------------------------- #

    # !pip install -U cofi
    # !pip install -U cofi-espresso








.. GENERATED FROM PYTHON SOURCE LINES 61-70

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from cofi import BaseProblem, InversionOptions, Inversion
    from cofi_espresso import XrayTomography

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 75-78

1. Define the problem
---------------------


.. GENERATED FROM PYTHON SOURCE LINES 78-81

.. code-block:: default


    xrt = XrayTomography()








.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: default


    xrt_problem = BaseProblem()
    xrt_problem.set_data(xrt.data)
    xrt_problem.set_jacobian(xrt.jacobian(xrt.starting_model))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluating paths:   0%|          | 0/3969 [00:00<?, ?it/s]    Evaluating paths:  18%|#8        | 731/3969 [00:00<00:00, 7307.52it/s]    Evaluating paths:  39%|###8      | 1542/3969 [00:00<00:00, 7774.64it/s]    Evaluating paths:  58%|#####8    | 2320/3969 [00:00<00:00, 7714.87it/s]    Evaluating paths:  78%|#######8  | 3113/3969 [00:00<00:00, 7796.93it/s]    Evaluating paths: 100%|#########9| 3958/3969 [00:00<00:00, 8029.29it/s]    Evaluating paths: 100%|##########| 3969/3969 [00:00<00:00, 7880.32it/s]




.. GENERATED FROM PYTHON SOURCE LINES 90-96

.. code-block:: default


    sigma = 0.01
    lamda = 0.5
    data_cov = np.identity(xrt.data_size) * sigma
    reg_matrix = np.identity(xrt.model_size)








.. GENERATED FROM PYTHON SOURCE LINES 98-102

.. code-block:: default


    xrt_problem.set_data_covariance(data_cov)
    xrt_problem.set_regularisation(2, lamda, reg_matrix)








.. GENERATED FROM PYTHON SOURCE LINES 107-109

Review what information is included in the ``BaseProblem`` object:


.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: default


    xrt_problem.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    =====================================================================
    Summary for inversion problem: BaseProblem
    =====================================================================
    Model shape: Unknown
    ---------------------------------------------------------------------
    List of functions/properties set by you:
    ['jacobian', 'regularisation', 'regularisation_matrix', 'regularisation_factor', 'data', 'data_covariance']
    ---------------------------------------------------------------------
    List of functions/properties created based on what you have provided:
    ['jacobian_times_vector']
    ---------------------------------------------------------------------
    List of functions/properties not set by you:
    ['objective', 'log_posterior', 'log_posterior_with_blobs', 'log_likelihood', 'log_prior', 'gradient', 'hessian', 'hessian_times_vector', 'residual', 'jacobian_times_vector', 'data_misfit', 'forward', 'data_covariance_inv', 'initial_model', 'model_shape', 'walkers_starting_pos', 'blobs_dtype', 'bounds', 'constraints']




.. GENERATED FROM PYTHON SOURCE LINES 117-120

2. Define the inversion options
-------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 120-124

.. code-block:: default


    my_options = InversionOptions()
    my_options.set_tool("scipy.linalg.lstsq")








.. GENERATED FROM PYTHON SOURCE LINES 129-131

Review what’s been defined for the inversion we are about to run:


.. GENERATED FROM PYTHON SOURCE LINES 131-134

.. code-block:: default


    my_options.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    =============================
    Summary for inversion options
    =============================
    Solving method: None set
    Use `suggest_solving_methods()` to check available solving methods.
    -----------------------------
    Backend tool: `scipy.linalg.lstsq` - SciPy's wrapper function over LAPACK's linear least-squares solver, using 'gelsd', 'gelsy' (default), or 'gelss' as backend driver
    References: ['https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html', 'https://www.netlib.org/lapack/lug/node27.html']
    Use `suggest_tools()` to check available backend tools.
    -----------------------------
    Solver-specific parameters: None set
    Use `suggest_solver_params()` to check required/optional solver-specific parameters.




.. GENERATED FROM PYTHON SOURCE LINES 139-142

3. Start an inversion
---------------------


.. GENERATED FROM PYTHON SOURCE LINES 142-147

.. code-block:: default


    inv = Inversion(xrt_problem, my_options)
    inv_result = inv.run()
    inv_result.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    model: [1.07869497 0.95684863 0.87860421 ... 0.90880894 0.97794447 1.04965095]
    sum of squared residuals: []
    effective rank: 2500
    singular values: [150.34541473  84.27705835  63.11086086 ...   0.50477741   0.50383334
       0.50353536]
    model covariance: [[ 4.00248936e-01 -1.15738546e-01 -1.54996966e-02 ... -1.19202437e-03
       1.51862605e-03 -8.07392363e-04]
     [-1.15738546e-01  9.04501691e-01 -3.32309762e-01 ...  3.04861931e-03
      -3.38090444e-03  1.51862605e-03]
     [-1.54996966e-02 -3.32309762e-01  6.96939238e-01 ... -2.92528444e-03
       3.04861931e-03 -1.19202437e-03]
     ...
     [-1.19202437e-03  3.04861931e-03 -2.92528444e-03 ...  6.96939238e-01
      -3.32309762e-01 -1.54996966e-02]
     [ 1.51862605e-03 -3.38090444e-03  3.04861931e-03 ... -3.32309762e-01
       9.04501691e-01 -1.15738546e-01]
     [-8.07392363e-04  1.51862605e-03 -1.19202437e-03 ... -1.54996966e-02
      -1.15738546e-01  4.00248936e-01]]




.. GENERATED FROM PYTHON SOURCE LINES 152-155

4. Plotting
-----------


.. GENERATED FROM PYTHON SOURCE LINES 155-158

.. code-block:: default


    xrt.plot_model(inv_result.model);




.. image-sg:: /cofi-examples/tools/sphinx_gallery/generated/images/sphx_glr_xray_tomography_001.png
   :alt: xray tomography
   :srcset: /cofi-examples/tools/sphinx_gallery/generated/images/sphx_glr_xray_tomography_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 163-166

5. Reflections / Conclusion / Further reading
---------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 169-171

We can see that…


.. GENERATED FROM PYTHON SOURCE LINES 174-187

--------------

Watermark
---------

.. raw:: html

   <!-- Feel free to add more modules in the watermark_list below, if more packages are used -->

.. raw:: html

   <!-- Otherwise please leave the below code cell unchanged -->


.. GENERATED FROM PYTHON SOURCE LINES 187-193

.. code-block:: default


    watermark_list = ["cofi", "numpy", "scipy", "matplotlib", "emcee", "arviz"]
    for pkg in watermark_list:
        pkg_var = __import__(pkg)
        print(pkg, getattr(pkg_var, "__version__"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cofi 0.1.2.dev9
    numpy 1.21.6
    scipy 1.9.1
    matplotlib 3.5.3
    emcee 3.1.2
    arviz 0.12.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.965 seconds)


.. _sphx_glr_download_cofi-examples_tools_sphinx_gallery_generated_xray_tomography.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: xray_tomography.py <xray_tomography.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: xray_tomography.ipynb <xray_tomography.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
