
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "cofi-examples/_sphinx_gallery/generated/gravity_density.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_cofi-examples__sphinx_gallery_generated_gravity_density.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_cofi-examples__sphinx_gallery_generated_gravity_density.py:


Gravity Density Model
=====================

.. GENERATED FROM PYTHON SOURCE LINES 9-12

.. raw:: html

	<badge><a href="https://colab.research.google.com/github/inlab-geo/cofi-examples/blob/main/notebooks/gravity/gravity_density.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></badge>

.. GENERATED FROM PYTHON SOURCE LINES 15-22

If you are running this notebook locally, make sure youâ€™ve followed
`steps
here <https://github.com/inlab-geo/cofi-examples#run-the-examples-with-cofi-locally>`__
to set up the environment. (This
`environment.yml <https://github.com/inlab-geo/cofi-examples/blob/main/environment.yml>`__
file specifies a list of packages required to run the notebooks)


.. GENERATED FROM PYTHON SOURCE LINES 25-29

Adapted from `gravity forward
code <https://github.com/inlab-geo/inversion-test-problems/blob/main/contrib/gravityforward/__init__.py>`__
written in inversion-test-problems


.. GENERATED FROM PYTHON SOURCE LINES 32-37

--------------

0. Import modules
-----------------


.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default


    # -------------------------------------------------------- #
    #                                                          #
    #     Uncomment below to set up environment on "colab"     #
    #                                                          #
    # -------------------------------------------------------- #

    # !pip install -U cofi








.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from cofi import BaseProblem, InversionOptions, Inversion

    from gravity_density_lib import *

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 63-72

--------------

1. Define the problem
---------------------

.. raw:: html

   <!-- I took out gx, gy for now to make it more straight forward. We can add all kinds of things once it is working.  -->


.. GENERATED FROM PYTHON SOURCE LINES 72-122

.. code-block:: default


    # Load true model and starting guesses
    rec_coords, _, _, z_nodes, model = load_gravity_model()
    Starting_model1, Starting_model2, Starting_model3 = load_starting_models()

    # Create "observed" data by adding noise to forward solution
    noise_level=0.05
    gz = forward(model)
    dataZ_obs= gz + np.random.normal(loc=0,scale=noise_level*np.max(np.abs(gz)),size=np.shape(gz))  

    # Create jacobian
    Jz = get_jacobian(model)

    # Define depth weighting values
    z0=18.6
    beta=2
    # Define regularization parameter
    epsilon=0.2

    # Create regularization
    # Calculate depth weighting fcn - high values at low z, low values at high z, no zeros.
    # Model is [Nx1] with N: no. of cells; W is [NxN] with weighting values on diagonal
    W=depth_weight(z_nodes[:,0],z0,beta)
    W=np.diag(W)

    # Set CoFI problem:
    grav_problem = BaseProblem()
    grav_problem.name = "Gravity"
    grav_problem.set_data(gz)

    # Here I linked the function, not the result
    grav_problem.set_forward(forward)

    # Here I linked to the actual jacobian. Jacobian size is (MxN) with M: receiver and N: model cells
    grav_problem.set_jacobian(Jz)

    # Set regularization; reg is a function that takes the model as input
    grav_problem.set_regularisation(reg_l1, epsilon)

    # Use default L2 misfit
    grav_problem.set_data_misfit("L2")
    grav_problem.set_initial_model(Starting_model3)

    # Set gradient, in hope of helping optimisers converge better
    def data_misfit_gradient(model):
        return 2* Jz.T @ (forward(model) - gz) / gz.shape[0]
    grav_problem.set_gradient(lambda m: data_misfit_gradient(m) + epsilon*reg_gradient_l1(m))

    grav_problem.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    =====================================================================
    Summary for inversion problem: Gravity
    =====================================================================
    Model shape: (1728,)
    ---------------------------------------------------------------------
    List of functions/properties set by you:
    ['gradient', 'jacobian', 'data_misfit', 'regularisation', 'forward', 'data', 'initial_model', 'model_shape']
    ---------------------------------------------------------------------
    List of functions/properties created based on what you have provided:
    ['objective', 'residual', 'jacobian_times_vector']
    ---------------------------------------------------------------------
    List of functions/properties not set by you:
    ['objective', 'log_posterior', 'log_posterior_with_blobs', 'log_likelihood', 'log_prior', 'hessian', 'hessian_times_vector', 'residual', 'jacobian_times_vector', 'data_covariance', 'data_covariance_inv', 'walkers_starting_pos', 'blobs_dtype', 'bounds', 'constraints']




.. GENERATED FROM PYTHON SOURCE LINES 127-132

--------------

2. Define the inversion
-----------------------


.. GENERATED FROM PYTHON SOURCE LINES 132-138

.. code-block:: default


    inv_options = InversionOptions()
    inv_options.set_tool("scipy.optimize.least_squares")

    inv_options.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    =============================
    Summary for inversion options
    =============================
    Solving method: None set
    Use `suggest_solving_methods()` to check available solving methods.
    -----------------------------
    Backend tool: `scipy.optimize.least_squares` - SciPy's non-linear least squares solver with bounds on variables, algorithms include 'trf' (default), 'dogbox', and 'lm'
    References: ['https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html']
    Use `suggest_tools()` to check available backend tools.
    -----------------------------
    Solver-specific parameters: None set
    Use `suggest_solver_params()` to check required/optional solver-specific parameters.




.. GENERATED FROM PYTHON SOURCE LINES 143-148

--------------

3. Start an inversion runner
----------------------------


.. GENERATED FROM PYTHON SOURCE LINES 148-152

.. code-block:: default


    inv = Inversion(grav_problem, inv_options)
    # inv.summary()








.. GENERATED FROM PYTHON SOURCE LINES 154-158

.. code-block:: default


    inv_result = inv.run()
    inv_result.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    cost: 0.003126096786196064
    fun: [0.00021396 0.00024856 0.00028794 0.00033178 0.00037902 0.00042766
     0.00047458 0.00051569 0.00054653 0.00056312 0.00056312 0.00054653
     0.00051569 0.00047458 0.00042766 0.00037902 0.00033178 0.00028794
     0.00024856 0.00021396 0.00024856 0.0002936  0.00034639 0.00040702
     0.00047459 0.00054656 0.00061832 0.00068313 0.0007329  0.0007601
     0.0007601  0.0007329  0.00068313 0.00061832 0.00054656 0.00047459
     0.00040702 0.00034639 0.0002936  0.00024856 0.00028794 0.00034639
     0.00041713 0.00050137 0.00059898 0.00070732 0.00081989 0.00092549
     0.00100918 0.00105588 0.00105588 0.00100918 0.00092549 0.00081989
     0.00070732 0.00059898 0.00050137 0.00041713 0.00034639 0.00028794
     0.00033178 0.00040702 0.00050137 0.00061834 0.00076016 0.00092553
     0.00110637 0.00128454 0.00143175 0.00151624 0.00151624 0.00143175
     0.00128454 0.00110637 0.00092553 0.00076016 0.00061834 0.00050137
     0.00040702 0.00033178 0.00037902 0.00047459 0.00059898 0.00076016
     0.00096588 0.00122018 0.00151636 0.00182726 0.00209888 0.00226101
     0.00226101 0.00209888 0.00182726 0.00151636 0.00122018 0.00096588
     0.00076016 0.00059898 0.00047459 0.00037902 0.00042766 0.00054656
     0.00070732 0.00092553 0.00122018 0.00160958 0.00209907 0.00265613
     0.00318087 0.00351173 0.00351173 0.00318087 0.00265613 0.00209907
     0.00160958 0.00122018 0.00092553 0.00070732 0.00054656 0.00042766
     0.00047458 0.00061832 0.00081989 0.00110637 0.00151636 0.00209907
     0.00289905 0.00390514 0.00495205 0.0056648  0.0056648  0.00495205
     0.00390514 0.00289905 0.00209907 0.00151636 0.00110637 0.00081989
     0.00061832 0.00047458 0.00051569 0.00068313 0.00092549 0.00128454
     0.00182726 0.00265613 0.00390514 0.00566613 0.00773978 0.00930364
     0.00930364 0.00773978 0.00566613 0.00390514 0.00265613 0.00182726
     0.00128454 0.00092549 0.00068313 0.00051569 0.00054653 0.0007329
     0.00100918 0.00143175 0.00209888 0.00318087 0.00495205 0.00773978
     0.01147989 0.01464978 0.01464978 0.01147989 0.00773978 0.00495205
     0.00318087 0.00209888 0.00143175 0.00100918 0.0007329  0.00054653
     0.00056312 0.0007601  0.00105588 0.00151624 0.00226101 0.00351173
     0.0056648  0.00930364 0.01464978 0.01958985 0.01958985 0.01464978
     0.00930364 0.0056648  0.00351173 0.00226101 0.00151624 0.00105588
     0.0007601  0.00056312 0.00056312 0.0007601  0.00105588 0.00151624
     0.00226101 0.00351173 0.0056648  0.00930364 0.01464978 0.01958985
     0.01958985 0.01464978 0.00930364 0.0056648  0.00351173 0.00226101
     0.00151624 0.00105588 0.0007601  0.00056312 0.00054653 0.0007329
     0.00100918 0.00143175 0.00209888 0.00318087 0.00495205 0.00773978
     0.01147989 0.01464978 0.01464978 0.01147989 0.00773978 0.00495205
     0.00318087 0.00209888 0.00143175 0.00100918 0.0007329  0.00054653
     0.00051569 0.00068313 0.00092549 0.00128454 0.00182726 0.00265613
     0.00390514 0.00566613 0.00773978 0.00930364 0.00930364 0.00773978
     0.00566613 0.00390514 0.00265613 0.00182726 0.00128454 0.00092549
     0.00068313 0.00051569 0.00047458 0.00061832 0.00081989 0.00110637
     0.00151636 0.00209907 0.00289905 0.00390514 0.00495205 0.0056648
     0.0056648  0.00495205 0.00390514 0.00289905 0.00209907 0.00151636
     0.00110637 0.00081989 0.00061832 0.00047458 0.00042766 0.00054656
     0.00070732 0.00092553 0.00122018 0.00160958 0.00209907 0.00265613
     0.00318087 0.00351173 0.00351173 0.00318087 0.00265613 0.00209907
     0.00160958 0.00122018 0.00092553 0.00070732 0.00054656 0.00042766
     0.00037902 0.00047459 0.00059898 0.00076016 0.00096588 0.00122018
     0.00151636 0.00182726 0.00209888 0.00226101 0.00226101 0.00209888
     0.00182726 0.00151636 0.00122018 0.00096588 0.00076016 0.00059898
     0.00047459 0.00037902 0.00033178 0.00040702 0.00050137 0.00061834
     0.00076016 0.00092553 0.00110637 0.00128454 0.00143175 0.00151624
     0.00151624 0.00143175 0.00128454 0.00110637 0.00092553 0.00076016
     0.00061834 0.00050137 0.00040702 0.00033178 0.00028794 0.00034639
     0.00041713 0.00050137 0.00059898 0.00070732 0.00081989 0.00092549
     0.00100918 0.00105588 0.00105588 0.00100918 0.00092549 0.00081989
     0.00070732 0.00059898 0.00050137 0.00041713 0.00034639 0.00028794
     0.00024856 0.0002936  0.00034639 0.00040702 0.00047459 0.00054656
     0.00061832 0.00068313 0.0007329  0.0007601  0.0007601  0.0007329
     0.00068313 0.00061832 0.00054656 0.00047459 0.00040702 0.00034639
     0.0002936  0.00024856 0.00021396 0.00024856 0.00028794 0.00033178
     0.00037902 0.00042766 0.00047458 0.00051569 0.00054653 0.00056312
     0.00056312 0.00054653 0.00051569 0.00047458 0.00042766 0.00037902
     0.00033178 0.00028794 0.00024856 0.00021396]
    jac: [[-1.75321219e+01 -3.38411200e-01 -3.06869858e-01 ... -1.73057631e-03
      -1.66588458e-03 -5.48007057e-02]
     [-1.68840552e+01 -3.24685932e-01 -2.94388644e-01 ... -1.92104264e-03
      -1.84266060e-03 -5.75902632e-02]
     [-1.61228746e+01 -3.08996389e-01 -2.80242344e-01 ... -2.13787381e-03
      -2.04259707e-03 -6.05661091e-02]
     ...
     [-1.31905803e+00 -4.10155567e-02 -4.26471666e-02 ... -2.42634168e-02
      -2.92647846e-02 -3.04424095e+01]
     [-1.25879932e+00 -3.73995693e-02 -3.87733352e-02 ... -2.54841065e-02
      -3.07072725e-02 -3.05477128e+01]
     [-1.20184620e+00 -3.41459142e-02 -3.53042231e-02 ... -2.64905418e-02
      -3.18717157e-02 -3.06185272e+01]]
    grad: [-3.9256728  -0.20363257 -0.20903043 ... -0.18722546 -0.26295396
     -1.38416382]
    optimality: 3.925672796827703
    active_mask: [0. 0. 0. ... 0. 0. 0.]
    nfev: 16
    njev: 16
    status: 3
    message: `xtol` termination condition is satisfied.
    model: [ 0.01535187  0.02008751  0.01629585 ...  0.00037005 -0.00419068
     -0.00445243]




.. GENERATED FROM PYTHON SOURCE LINES 163-165

Letâ€™s see the density image from a vertical plane:


.. GENERATED FROM PYTHON SOURCE LINES 165-171

.. code-block:: default


    result_model = inv_result.model.reshape(12,12,12)

    plt.imshow(result_model[::-1,6,:])
    plt.colorbar();




.. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_gravity_density_001.png
   :alt: gravity density
   :srcset: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_gravity_density_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7f8ce49f0130>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

From a different angle:


.. GENERATED FROM PYTHON SOURCE LINES 178-182

.. code-block:: default


    plt.imshow(result_model[6,:,:])
    plt.colorbar();




.. image-sg:: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_gravity_density_002.png
   :alt: gravity density
   :srcset: /cofi-examples/_sphinx_gallery/generated/images/sphx_glr_gravity_density_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7f8cde5a7220>



.. GENERATED FROM PYTHON SOURCE LINES 187-192

--------------

Watermark
---------


.. GENERATED FROM PYTHON SOURCE LINES 192-198

.. code-block:: default


    watermark_list = ["cofi", "numpy", "scipy", "matplotlib", "emcee", "arviz"]
    for pkg in watermark_list:
        pkg_var = __import__(pkg)
        print(pkg, getattr(pkg_var, "__version__"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    cofi 0.1.2.dev6
    numpy 1.21.6
    scipy 1.8.1
    matplotlib 3.5.2
    emcee 3.1.2
    arviz 0.12.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.670 seconds)


.. _sphx_glr_download_cofi-examples__sphinx_gallery_generated_gravity_density.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: gravity_density.py <gravity_density.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: gravity_density.ipynb <gravity_density.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
